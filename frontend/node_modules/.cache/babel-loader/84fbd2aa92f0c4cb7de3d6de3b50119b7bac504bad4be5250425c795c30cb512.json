{"ast":null,"code":"import { ref, reactive, onMounted, computed } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport axios from 'axios';\n\n// 状态变量\n\nexport default {\n  __name: 'Materials',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const loading = ref(false);\n    const materialList = ref([]);\n    const courseList = ref([]);\n    const total = ref(0);\n\n    // 查询参数\n    const queryParams = reactive({\n      pageNum: 1,\n      pageSize: 10,\n      courseId: undefined,\n      type: undefined\n    });\n\n    // 计算属性用于v-model绑定\n    const currentPage = computed({\n      get: () => queryParams.pageNum,\n      set: val => {\n        queryParams.pageNum = val;\n      }\n    });\n    const pageSize = computed({\n      get: () => queryParams.pageSize,\n      set: val => {\n        queryParams.pageSize = val;\n      }\n    });\n\n    // 计算属性：当前选中的课程名称\n    const selectedCourseName = computed(() => {\n      if (!queryParams.courseId) return '';\n      const course = courseList.value.find(c => c.id === queryParams.courseId);\n      return course ? course.name : '';\n    });\n\n    // 计算属性：当前选中的资料类型名称\n    const selectedTypeName = computed(() => {\n      if (queryParams.type === undefined) return '';\n      return queryParams.type === 0 ? '课程资料' : '学生资料';\n    });\n\n    // 获取课程列表\n    const fetchCourseList = async () => {\n      try {\n        const response = await axios.get('/api/student/courses');\n        courseList.value = response.data.data || [];\n\n        // 如果有课程，默认选择第一个\n        if (courseList.value.length > 0 && !queryParams.courseId) {\n          queryParams.courseId = courseList.value[0].id;\n          await fetchMaterialList();\n        }\n      } catch (error) {\n        console.error('获取课程列表失败:', error);\n        ElMessage.error('获取课程列表失败');\n      }\n    };\n\n    // 获取资料列表\n    const fetchMaterialList = async () => {\n      loading.value = true;\n      try {\n        const response = await axios.get('/api/material/list', {\n          params: queryParams\n        });\n        materialList.value = response.data.data.records || [];\n\n        // 检查返回的数据结构，以便调试\n        if (materialList.value.length > 0) {\n          const firstItem = materialList.value[0];\n          console.log('资料列表第一条数据:', firstItem);\n          console.log('资料列表第一条数据的所有字段:', Object.keys(firstItem));\n\n          // 检查所有可能的上传者名称字段\n          const possibleFields = ['uploadUserName', 'upload_user_name', 'uploaderName', 'uploader_name', 'userName', 'user_name'];\n          possibleFields.forEach(field => {\n            console.log(`字段 ${field} 的值:`, firstItem[field]);\n          });\n        }\n\n        // 处理课程名称和上传者名称\n        materialList.value = materialList.value.map(material => {\n          // 添加课程名称处理\n          if (material.courseId && !material.courseName && !material.course_name) {\n            const course = courseList.value.find(c => c.id === material.courseId);\n            if (course) {\n              material.courseName = course.name;\n            }\n          }\n\n          // 检查并记录上传者字段情况（调试用）\n          if (!material.uploadUserName || material.uploadUserName.trim() === '') {\n            console.log('资料缺少上传者信息:', material.id, material.name, '所有字段:', Object.keys(material));\n          }\n          return material;\n        });\n        total.value = response.data.data.total || 0;\n      } catch (error) {\n        console.error('获取资料列表失败:', error);\n        ElMessage.error('获取资料列表失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 重置查询条件\n    const resetQuery = () => {\n      queryParams.courseId = undefined;\n      queryParams.type = undefined;\n      fetchMaterialList();\n    };\n\n    // 处理页码变化\n    const handleCurrentChange = val => {\n      queryParams.pageNum = val;\n      fetchMaterialList();\n    };\n\n    // 处理每页条数变化\n    const handleSizeChange = val => {\n      queryParams.pageSize = val;\n      fetchMaterialList();\n    };\n\n    // 处理下载\n    const handleDownload = row => {\n      ElMessageBox.confirm('确认下载该资料?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'info'\n      }).then(() => {\n        // 这里应该调用API下载资料\n        window.open(`/api/material/download/${row.id}`, '_blank');\n      }).catch(() => {});\n    };\n\n    // 格式化文件大小\n    const formatFileSize = size => {\n      if (!size) return '0 B';\n      const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n      let index = 0;\n      while (size >= 1024 && index < units.length - 1) {\n        size /= 1024;\n        index++;\n      }\n      return size.toFixed(2) + ' ' + units[index];\n    };\n\n    // 获取文件类型标签样式\n    const getFileTypeTag = fileType => {\n      if (!fileType) return '';\n      if (fileType.includes('image')) return 'success';\n      if (fileType.includes('pdf')) return 'danger';\n      if (fileType.includes('word') || fileType.includes('document')) return 'primary';\n      if (fileType.includes('excel') || fileType.includes('sheet')) return '';\n      if (fileType.includes('zip') || fileType.includes('rar')) return 'warning';\n      return 'info';\n    };\n\n    // 获取文件类型显示标签\n    const getFileTypeLabel = fileType => {\n      if (!fileType) return '未知';\n      if (fileType.includes('image')) return '图片';\n      if (fileType.includes('pdf')) return 'PDF';\n      if (fileType.includes('word') || fileType.includes('document')) return 'Word';\n      if (fileType.includes('excel') || fileType.includes('sheet')) return 'Excel';\n      if (fileType.includes('zip') || fileType.includes('rar')) return '压缩包';\n      return fileType.split('/')[1] || fileType;\n    };\n\n    // 获取课程名称（处理不同的属性名和空值情况）\n    const getCourseName = row => {\n      // 按优先级检查不同可能的属性名\n      if (row.courseName) return row.courseName;\n      if (row.course_name) return row.course_name;\n\n      // 如果有courseId但没有名称，尝试从courseList查找\n      if (row.courseId || row.course_id) {\n        const courseId = row.courseId || row.course_id;\n        const course = courseList.value.find(c => c.id === courseId);\n        return course ? course.name : '未知课程';\n      }\n      return '未知课程';\n    };\n\n    // 获取上传者名称（处理不同的属性名和空值情况）\n    const getUploaderName = row => {\n      // 按优先级检查不同可能的属性名\n      if (row.uploadUserName && row.uploadUserName.trim() !== '') return row.uploadUserName;\n      if (row.upload_user_name && row.upload_user_name.trim() !== '') return row.upload_user_name;\n      if (row.uploaderName && row.uploaderName.trim() !== '') return row.uploaderName;\n      if (row.uploader_name && row.uploader_name.trim() !== '') return row.uploader_name;\n      if (row.userName && row.userName.trim() !== '') return row.userName;\n      if (row.user_name && row.user_name.trim() !== '') return row.user_name;\n\n      // 如果找不到任何名称，返回未知用户\n      console.log('找不到上传者名称字段，资料ID:', row.id, '可用字段:', Object.keys(row));\n      return '未知用户';\n    };\n\n    // 页面加载时获取数据\n    onMounted(async () => {\n      // 先获取课程列表，再获取材料列表\n      await fetchCourseList();\n      // fetchMaterialList会在fetchCourseList中自动调用\n    });\n    const __returned__ = {\n      loading,\n      materialList,\n      courseList,\n      total,\n      queryParams,\n      currentPage,\n      pageSize,\n      selectedCourseName,\n      selectedTypeName,\n      fetchCourseList,\n      fetchMaterialList,\n      resetQuery,\n      handleCurrentChange,\n      handleSizeChange,\n      handleDownload,\n      formatFileSize,\n      getFileTypeTag,\n      getFileTypeLabel,\n      getCourseName,\n      getUploaderName,\n      ref,\n      reactive,\n      onMounted,\n      computed,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","ElMessage","ElMessageBox","axios","loading","materialList","courseList","total","queryParams","pageNum","pageSize","courseId","undefined","type","currentPage","get","set","val","selectedCourseName","course","value","find","c","id","name","selectedTypeName","fetchCourseList","response","data","length","fetchMaterialList","error","console","params","records","firstItem","log","Object","keys","possibleFields","forEach","field","map","material","courseName","course_name","uploadUserName","trim","resetQuery","handleCurrentChange","handleSizeChange","handleDownload","row","confirm","confirmButtonText","cancelButtonText","then","window","open","catch","formatFileSize","size","units","index","toFixed","getFileTypeTag","fileType","includes","getFileTypeLabel","split","getCourseName","course_id","getUploaderName","upload_user_name","uploaderName","uploader_name","userName","user_name"],"sources":["C:/Users/18083/Desktop/CCIT/TCRSystem/TCRSystem/frontend/src/views/student/Materials.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div class=\"materials-container\">\n    <h1>课程资料</h1>\n    \n    <el-card class=\"filter-card\">\n      <el-form :inline=\"true\" :model=\"queryParams\" class=\"filter-form\">\n        <el-form-item label=\"课程\">\n          <el-select \n            v-model=\"queryParams.courseId\" \n            placeholder=\"选择课程\" \n            clearable\n            style=\"width: 220px;\"\n            filterable\n          >\n            <el-option\n              v-for=\"course in courseList\"\n              :key=\"course.id\"\n              :label=\"course.name\"\n              :value=\"course.id\"\n            />\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"资料类型\">\n          <el-select \n            v-model=\"queryParams.type\" \n            placeholder=\"选择类型\" \n            clearable\n            style=\"width: 150px;\"\n          >\n            <el-option :label=\"'课程资料'\" :value=\"0\" />\n            <el-option :label=\"'学生资料'\" :value=\"1\" />\n          </el-select>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"fetchMaterialList\">查询</el-button>\n          <el-button @click=\"resetQuery\">重置</el-button>\n        </el-form-item>\n      </el-form>\n      \n      <!-- 显示当前筛选条件 -->\n      <div class=\"filter-info\" v-if=\"selectedCourseName || selectedTypeName\">\n        <span>当前筛选: </span>\n        <el-tag v-if=\"selectedCourseName\" type=\"info\" class=\"filter-tag\">\n          课程: {{ selectedCourseName }}\n        </el-tag>\n        <el-tag v-if=\"selectedTypeName\" type=\"info\" class=\"filter-tag\">\n          类型: {{ selectedTypeName }}\n        </el-tag>\n      </div>\n    </el-card>\n    \n    <el-card class=\"material-list-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>资料列表</span>\n        </div>\n      </template>\n      \n      <el-table\n        v-loading=\"loading\"\n        :data=\"materialList\"\n        style=\"width: 100%\"\n        border\n      >\n        <el-table-column prop=\"name\" label=\"资料名称\" min-width=\"180\" />\n        <el-table-column prop=\"description\" label=\"资料描述\" min-width=\"200\" />\n        <el-table-column label=\"所属课程\" min-width=\"120\">\n          <template #default=\"scope\">\n            {{ getCourseName(scope.row) }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"fileType\" label=\"文件类型\" min-width=\"100\">\n          <template #default=\"scope\">\n            <el-tag :type=\"getFileTypeTag(scope.row.fileType)\">\n              {{ getFileTypeLabel(scope.row.fileType) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"fileSize\" label=\"文件大小\" min-width=\"100\">\n          <template #default=\"scope\">\n            {{ formatFileSize(scope.row.fileSize) }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"downloadCount\" label=\"下载次数\" min-width=\"100\" />\n        <el-table-column label=\"上传者\" min-width=\"100\">\n          <template #default=\"scope\">\n            {{ getUploaderName(scope.row) }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"createTime\" label=\"上传时间\" min-width=\"160\" />\n        <el-table-column label=\"操作\" width=\"120\" fixed=\"right\">\n          <template #default=\"scope\">\n            <el-button type=\"primary\" link @click=\"handleDownload(scope.row)\">下载</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      \n      <div class=\"pagination-container\">\n        <el-pagination\n          :current-page=\"currentPage\"\n          :page-size=\"pageSize\"\n          :page-sizes=\"[10, 20, 50, 100]\"\n          layout=\"total, sizes, prev, pager, next, jumper\"\n          :total=\"total\"\n          @size-change=\"handleSizeChange\"\n          @current-change=\"handleCurrentChange\"\n          @update:current-page=\"val => currentPage = val\"\n          @update:page-size=\"val => pageSize = val\"\n        />\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted, computed } from 'vue'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport axios from 'axios'\n\n// 状态变量\nconst loading = ref(false)\nconst materialList = ref([])\nconst courseList = ref([])\nconst total = ref(0)\n\n// 查询参数\nconst queryParams = reactive({\n  pageNum: 1,\n  pageSize: 10,\n  courseId: undefined,\n  type: undefined\n})\n\n// 计算属性用于v-model绑定\nconst currentPage = computed({\n  get: () => queryParams.pageNum,\n  set: (val) => { queryParams.pageNum = val }\n})\n\nconst pageSize = computed({\n  get: () => queryParams.pageSize,\n  set: (val) => { queryParams.pageSize = val }\n})\n\n// 计算属性：当前选中的课程名称\nconst selectedCourseName = computed(() => {\n  if (!queryParams.courseId) return ''\n  const course = courseList.value.find(c => c.id === queryParams.courseId)\n  return course ? course.name : ''\n})\n\n// 计算属性：当前选中的资料类型名称\nconst selectedTypeName = computed(() => {\n  if (queryParams.type === undefined) return ''\n  return queryParams.type === 0 ? '课程资料' : '学生资料'\n})\n\n// 获取课程列表\nconst fetchCourseList = async () => {\n  try {\n    const response = await axios.get('/api/student/courses')\n    courseList.value = response.data.data || []\n    \n    // 如果有课程，默认选择第一个\n    if (courseList.value.length > 0 && !queryParams.courseId) {\n      queryParams.courseId = courseList.value[0].id\n      await fetchMaterialList()\n    }\n  } catch (error) {\n    console.error('获取课程列表失败:', error)\n    ElMessage.error('获取课程列表失败')\n  }\n}\n\n// 获取资料列表\nconst fetchMaterialList = async () => {\n  loading.value = true\n  try {\n    const response = await axios.get('/api/material/list', {\n      params: queryParams\n    })\n    materialList.value = response.data.data.records || []\n    \n    // 检查返回的数据结构，以便调试\n    if (materialList.value.length > 0) {\n      const firstItem = materialList.value[0]\n      console.log('资料列表第一条数据:', firstItem)\n      console.log('资料列表第一条数据的所有字段:', Object.keys(firstItem))\n      \n      // 检查所有可能的上传者名称字段\n      const possibleFields = ['uploadUserName', 'upload_user_name', 'uploaderName', 'uploader_name', 'userName', 'user_name']\n      possibleFields.forEach(field => {\n        console.log(`字段 ${field} 的值:`, firstItem[field])\n      })\n    }\n    \n    // 处理课程名称和上传者名称\n    materialList.value = materialList.value.map(material => {\n      // 添加课程名称处理\n      if (material.courseId && !material.courseName && !material.course_name) {\n        const course = courseList.value.find(c => c.id === material.courseId)\n        if (course) {\n          material.courseName = course.name\n        }\n      }\n      \n      // 检查并记录上传者字段情况（调试用）\n      if (!material.uploadUserName || material.uploadUserName.trim() === '') {\n        console.log('资料缺少上传者信息:', material.id, material.name, '所有字段:', Object.keys(material))\n      }\n      \n      return material\n    })\n    \n    total.value = response.data.data.total || 0\n  } catch (error) {\n    console.error('获取资料列表失败:', error)\n    ElMessage.error('获取资料列表失败')\n  } finally {\n    loading.value = false\n  }\n}\n\n// 重置查询条件\nconst resetQuery = () => {\n  queryParams.courseId = undefined\n  queryParams.type = undefined\n  fetchMaterialList()\n}\n\n// 处理页码变化\nconst handleCurrentChange = (val) => {\n  queryParams.pageNum = val\n  fetchMaterialList()\n}\n\n// 处理每页条数变化\nconst handleSizeChange = (val) => {\n  queryParams.pageSize = val\n  fetchMaterialList()\n}\n\n// 处理下载\nconst handleDownload = (row) => {\n  ElMessageBox.confirm('确认下载该资料?', '提示', {\n    confirmButtonText: '确定',\n    cancelButtonText: '取消',\n    type: 'info'\n  }).then(() => {\n    // 这里应该调用API下载资料\n    window.open(`/api/material/download/${row.id}`, '_blank')\n  }).catch(() => {})\n}\n\n// 格式化文件大小\nconst formatFileSize = (size) => {\n  if (!size) return '0 B'\n  const units = ['B', 'KB', 'MB', 'GB', 'TB']\n  let index = 0\n  while (size >= 1024 && index < units.length - 1) {\n    size /= 1024\n    index++\n  }\n  return size.toFixed(2) + ' ' + units[index]\n}\n\n// 获取文件类型标签样式\nconst getFileTypeTag = (fileType) => {\n  if (!fileType) return ''\n  if (fileType.includes('image')) return 'success'\n  if (fileType.includes('pdf')) return 'danger'\n  if (fileType.includes('word') || fileType.includes('document')) return 'primary'\n  if (fileType.includes('excel') || fileType.includes('sheet')) return ''\n  if (fileType.includes('zip') || fileType.includes('rar')) return 'warning'\n  return 'info'\n}\n\n// 获取文件类型显示标签\nconst getFileTypeLabel = (fileType) => {\n  if (!fileType) return '未知'\n  if (fileType.includes('image')) return '图片'\n  if (fileType.includes('pdf')) return 'PDF'\n  if (fileType.includes('word') || fileType.includes('document')) return 'Word'\n  if (fileType.includes('excel') || fileType.includes('sheet')) return 'Excel'\n  if (fileType.includes('zip') || fileType.includes('rar')) return '压缩包'\n  return fileType.split('/')[1] || fileType\n}\n\n// 获取课程名称（处理不同的属性名和空值情况）\nconst getCourseName = (row) => {\n  // 按优先级检查不同可能的属性名\n  if (row.courseName) return row.courseName\n  if (row.course_name) return row.course_name\n  \n  // 如果有courseId但没有名称，尝试从courseList查找\n  if (row.courseId || row.course_id) {\n    const courseId = row.courseId || row.course_id\n    const course = courseList.value.find(c => c.id === courseId)\n    return course ? course.name : '未知课程'\n  }\n  \n  return '未知课程'\n}\n\n// 获取上传者名称（处理不同的属性名和空值情况）\nconst getUploaderName = (row) => {\n  // 按优先级检查不同可能的属性名\n  if (row.uploadUserName && row.uploadUserName.trim() !== '') return row.uploadUserName\n  if (row.upload_user_name && row.upload_user_name.trim() !== '') return row.upload_user_name\n  if (row.uploaderName && row.uploaderName.trim() !== '') return row.uploaderName\n  if (row.uploader_name && row.uploader_name.trim() !== '') return row.uploader_name\n  if (row.userName && row.userName.trim() !== '') return row.userName\n  if (row.user_name && row.user_name.trim() !== '') return row.user_name\n  \n  // 如果找不到任何名称，返回未知用户\n  console.log('找不到上传者名称字段，资料ID:', row.id, '可用字段:', Object.keys(row))\n  return '未知用户'\n}\n\n// 页面加载时获取数据\nonMounted(async () => {\n  // 先获取课程列表，再获取材料列表\n  await fetchCourseList()\n  // fetchMaterialList会在fetchCourseList中自动调用\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.materials-container {\n  h1 {\n    margin-bottom: 20px;\n  }\n  \n  .filter-card {\n    margin-bottom: 20px;\n    \n    .filter-info {\n      margin-top: 10px;\n      font-size: 14px;\n      color: #606266;\n      \n      .filter-tag {\n        margin-left: 8px;\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  .material-list-card {\n    .card-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n  }\n  \n  .pagination-container {\n    margin-top: 20px;\n    display: flex;\n    justify-content: flex-end;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}