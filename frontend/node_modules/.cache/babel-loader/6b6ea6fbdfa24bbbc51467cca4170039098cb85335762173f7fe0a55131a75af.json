{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport axios from 'axios';\n\n// 查询参数\n\nexport default {\n  __name: 'TeacherManagement',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const queryParams = reactive({\n      pageNum: 1,\n      pageSize: 10,\n      realName: '',\n      username: '',\n      titleType: undefined\n    });\n\n    // 教师列表\n    const teacherList = ref([]);\n    // 教师职称列表\n    const teacherTitles = ref([]);\n    // 总数据条数\n    const total = ref(0);\n    // 加载状态\n    const loading = ref(false);\n\n    // 对话框相关\n    const dialogVisible = ref(false);\n    const dialogTitle = ref('');\n    const dialogType = ref('add'); // add or edit\n    const teacherFormRef = ref(null);\n    const teacherForm = reactive({\n      id: undefined,\n      username: '',\n      realName: '',\n      password: '',\n      email: '',\n      phone: '',\n      status: 1,\n      role: 1 // 教师角色固定为1\n    });\n\n    // 教师表单验证规则\n    const teacherRules = {\n      username: [{\n        required: true,\n        message: '请输入工号',\n        trigger: 'blur'\n      }, {\n        min: 3,\n        max: 20,\n        message: '长度在 3 到 20 个字符',\n        trigger: 'blur'\n      }],\n      realName: [{\n        required: true,\n        message: '请输入姓名',\n        trigger: 'blur'\n      }],\n      password: [{\n        required: dialogType === 'add',\n        message: '请输入密码',\n        trigger: 'blur'\n      }, {\n        min: 6,\n        max: 20,\n        message: '长度在 6 到 20 个字符',\n        trigger: 'blur'\n      }],\n      email: [{\n        type: 'email',\n        message: '请输入正确的邮箱地址',\n        trigger: 'blur'\n      }]\n    };\n\n    // 职称对话框相关\n    const titleDialogVisible = ref(false);\n    const titleFormRef = ref(null);\n    const currentTeacher = ref({});\n    const titleForm = reactive({\n      teacherId: undefined,\n      isNormalTeacher: false,\n      isCourseLeader: false,\n      isMajorLeader: false,\n      isViceDean: false,\n      courseId: undefined,\n      majorId: undefined,\n      collegeId: undefined,\n      hasCourseLeader: false,\n      hasMajorLeader: false,\n      hasViceDean: false\n    });\n\n    // 课程、专业、学院列表\n    const courseList = ref([]);\n    const majorList = ref([]);\n    const collegeList = ref([]);\n\n    // 获取教师列表\n    const fetchTeachers = async () => {\n      loading.value = true;\n      try {\n        const response = await axios.get('/api/admin/teacher/list', {\n          params: queryParams\n        });\n        if (response.data.code === 200) {\n          teacherList.value = response.data.data.records;\n          total.value = response.data.data.total;\n        }\n      } catch (error) {\n        console.error('获取教师列表失败:', error);\n        ElMessage.error('获取教师列表失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 获取教师职称列表\n    const fetchTeacherTitles = async () => {\n      try {\n        const response = await axios.get('/api/admin/teacher/titles');\n        if (response.data.code === 200) {\n          teacherTitles.value = response.data.data;\n        }\n      } catch (error) {\n        console.error('获取教师职称列表失败:', error);\n        ElMessage.error('获取教师职称列表失败');\n      }\n    };\n\n    // 获取课程列表\n    const fetchCourses = async () => {\n      try {\n        const response = await axios.get('/api/course/list', {\n          params: {\n            pageNum: 1,\n            pageSize: 100\n          }\n        });\n        if (response.data.code === 200) {\n          courseList.value = response.data.data.records;\n        }\n      } catch (error) {\n        console.error('获取课程列表失败:', error);\n        ElMessage.error('获取课程列表失败');\n      }\n    };\n\n    // 获取专业列表\n    const fetchMajors = async () => {\n      try {\n        const response = await axios.get('/api/admin/major/list');\n        if (response.data.code === 200) {\n          majorList.value = response.data.data;\n        }\n      } catch (error) {\n        console.error('获取专业列表失败:', error);\n        ElMessage.error('获取专业列表失败');\n      }\n    };\n\n    // 获取学院列表\n    const fetchColleges = async () => {\n      try {\n        const response = await axios.get('/api/admin/college/list');\n        if (response.data.code === 200) {\n          collegeList.value = response.data.data;\n        }\n      } catch (error) {\n        console.error('获取学院列表失败:', error);\n        ElMessage.error('获取学院列表失败');\n      }\n    };\n\n    // 重置查询条件\n    const resetQuery = () => {\n      queryParams.realName = '';\n      queryParams.username = '';\n      queryParams.titleType = undefined;\n      fetchTeachers();\n    };\n\n    // 处理页码变化\n    const handleCurrentChange = val => {\n      queryParams.pageNum = val;\n      fetchTeachers();\n    };\n\n    // 处理每页条数变化\n    const handleSizeChange = val => {\n      queryParams.pageSize = val;\n      fetchTeachers();\n    };\n\n    // 处理添加教师\n    const handleAdd = () => {\n      dialogType.value = 'add';\n      dialogTitle.value = '添加教师';\n      teacherForm.id = undefined;\n      teacherForm.username = '';\n      teacherForm.realName = '';\n      teacherForm.password = '';\n      teacherForm.email = '';\n      teacherForm.phone = '';\n      teacherForm.status = 1;\n      teacherForm.role = 1;\n      dialogVisible.value = true;\n    };\n\n    // 处理编辑教师\n    const handleEdit = row => {\n      dialogType.value = 'edit';\n      dialogTitle.value = '编辑教师';\n      teacherForm.id = row.id;\n      teacherForm.username = row.username;\n      teacherForm.realName = row.realName;\n      teacherForm.password = ''; // 清空密码字段\n      teacherForm.email = row.email;\n      teacherForm.phone = row.phone;\n      teacherForm.status = row.status;\n      teacherForm.role = row.role;\n      dialogVisible.value = true;\n    };\n\n    // 处理删除教师\n    const handleDelete = row => {\n      ElMessageBox.confirm('确定要删除该教师吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const response = await axios.delete(`/api/admin/teacher/${row.id}`);\n          if (response.data.code === 200) {\n            ElMessage.success('删除成功');\n            fetchTeachers();\n          } else {\n            ElMessage.error(response.data.message || '删除失败');\n          }\n        } catch (error) {\n          console.error('删除教师失败:', error);\n          ElMessage.error('删除教师失败');\n        }\n      }).catch(() => {});\n    };\n\n    // 处理状态变化\n    const handleStatusChange = async row => {\n      try {\n        const response = await axios.put('/api/admin/teacher/status', {\n          id: row.id,\n          status: row.status\n        });\n        if (response.data.code === 200) {\n          ElMessage.success(`${row.status === 1 ? '启用' : '禁用'}成功`);\n        } else {\n          ElMessage.error(response.data.message || '操作失败');\n          // 恢复原状态\n          row.status = row.status === 1 ? 0 : 1;\n        }\n      } catch (error) {\n        console.error('修改状态失败:', error);\n        ElMessage.error('修改状态失败');\n        // 恢复原状态\n        row.status = row.status === 1 ? 0 : 1;\n      }\n    };\n\n    // 提交教师表单\n    const submitTeacherForm = () => {\n      teacherFormRef.value.validate(async valid => {\n        if (valid) {\n          try {\n            let response;\n            if (dialogType.value === 'add') {\n              response = await axios.post('/api/admin/teacher', teacherForm);\n            } else {\n              response = await axios.put('/api/admin/teacher', teacherForm);\n            }\n            if (response.data.code === 200) {\n              ElMessage.success(dialogType.value === 'add' ? '添加成功' : '修改成功');\n              dialogVisible.value = false;\n              fetchTeachers();\n            } else {\n              ElMessage.error(response.data.message || (dialogType.value === 'add' ? '添加失败' : '修改失败'));\n            }\n          } catch (error) {\n            console.error(dialogType.value === 'add' ? '添加教师失败:' : '修改教师失败:', error);\n            ElMessage.error(dialogType.value === 'add' ? '添加教师失败' : '修改教师失败');\n          }\n        }\n      });\n    };\n\n    // 判断教师是否有指定职称\n    const hasTitle = (teacherId, titleType) => {\n      return teacherTitles.value.some(title => title.teacherId === teacherId && title.titleType === titleType);\n    };\n\n    // 处理设置职称\n    const handleSetTitle = async row => {\n      try {\n        currentTeacher.value = row;\n        titleForm.teacherId = row.id;\n\n        // 初始化职称表单\n        titleForm.isNormalTeacher = hasTitle(row.id, 0);\n        titleForm.isCourseLeader = hasTitle(row.id, 1);\n        titleForm.isMajorLeader = hasTitle(row.id, 2);\n        titleForm.isViceDean = hasTitle(row.id, 3);\n\n        // 获取当前职称对应的课程、专业、学院ID\n        const courseLeaderTitle = teacherTitles.value.find(title => title.teacherId === row.id && title.titleType === 1);\n        titleForm.courseId = courseLeaderTitle ? courseLeaderTitle.courseId : undefined;\n        const majorLeaderTitle = teacherTitles.value.find(title => title.teacherId === row.id && title.titleType === 2);\n        titleForm.majorId = majorLeaderTitle ? majorLeaderTitle.majorId : undefined;\n        const viceDeanTitle = teacherTitles.value.find(title => title.teacherId === row.id && title.titleType === 3);\n        titleForm.collegeId = viceDeanTitle ? viceDeanTitle.collegeId : undefined;\n\n        // 如果是课程负责人但没有选择课程，则默认选择第一个课程\n        if (titleForm.isCourseLeader && !titleForm.courseId && courseList.value.length > 0) {\n          titleForm.courseId = courseList.value[0].id;\n        }\n\n        // 如果是专业负责人但没有选择专业，则默认选择第一个专业\n        if (titleForm.isMajorLeader && !titleForm.majorId && majorList.value.length > 0) {\n          titleForm.majorId = majorList.value[0].id;\n        }\n\n        // 如果是副院长但没有选择学院，则默认选择第一个学院\n        if (titleForm.isViceDean && !titleForm.collegeId && collegeList.value.length > 0) {\n          titleForm.collegeId = collegeList.value[0].id;\n        }\n\n        // 检查是否已有其他教师担任这些职称\n        if (titleForm.courseId) {\n          titleForm.hasCourseLeader = teacherTitles.value.some(title => title.titleType === 1 && title.teacherId !== row.id && title.courseId === titleForm.courseId);\n        } else {\n          titleForm.hasCourseLeader = false;\n        }\n        if (titleForm.majorId) {\n          titleForm.hasMajorLeader = teacherTitles.value.some(title => title.titleType === 2 && title.teacherId !== row.id && title.majorId === titleForm.majorId);\n        } else {\n          titleForm.hasMajorLeader = false;\n        }\n        if (titleForm.collegeId) {\n          titleForm.hasViceDean = teacherTitles.value.some(title => title.titleType === 3 && title.teacherId !== row.id && title.collegeId === titleForm.collegeId);\n        } else {\n          titleForm.hasViceDean = false;\n        }\n        titleDialogVisible.value = true;\n      } catch (error) {\n        console.error('设置教师职称时出错:', error);\n        ElMessage.error('设置教师职称时出错，请刷新页面后重试');\n      }\n    };\n\n    // 提交职称表单\n    const submitTitleForm = async () => {\n      try {\n        // 验证必填项\n        if (titleForm.isCourseLeader && !titleForm.courseId) {\n          ElMessage.warning('请选择负责的课程');\n          return;\n        }\n        if (titleForm.isMajorLeader && !titleForm.majorId) {\n          ElMessage.warning('请选择负责的专业');\n          return;\n        }\n        if (titleForm.isViceDean && !titleForm.collegeId) {\n          ElMessage.warning('请选择所属学院');\n          return;\n        }\n        const response = await axios.post('/api/admin/teacher/titles', {\n          teacherId: titleForm.teacherId,\n          isNormalTeacher: titleForm.isNormalTeacher,\n          isCourseLeader: titleForm.isCourseLeader,\n          isMajorLeader: titleForm.isMajorLeader,\n          isViceDean: titleForm.isViceDean,\n          courseId: titleForm.courseId,\n          majorId: titleForm.majorId,\n          collegeId: titleForm.collegeId\n        });\n        if (response.data.code === 200) {\n          ElMessage.success('设置职称成功');\n          titleDialogVisible.value = false;\n          fetchTeacherTitles();\n          fetchTeachers();\n        } else {\n          ElMessage.error(response.data.message || '设置职称失败');\n        }\n      } catch (error) {\n        console.error('设置职称失败:', error);\n        ElMessage.error('设置职称失败，请刷新页面后重试');\n      }\n    };\n\n    // 处理职称对话框关闭\n    const handleTitleDialogClosed = () => {\n      try {\n        // 重置职称表单\n        titleForm.teacherId = undefined;\n        titleForm.isNormalTeacher = false;\n        titleForm.isCourseLeader = false;\n        titleForm.isMajorLeader = false;\n        titleForm.isViceDean = false;\n        titleForm.courseId = undefined;\n        titleForm.majorId = undefined;\n        titleForm.collegeId = undefined;\n        titleForm.hasCourseLeader = false;\n        titleForm.hasMajorLeader = false;\n        titleForm.hasViceDean = false;\n\n        // 清空当前选中教师\n        currentTeacher.value = {};\n      } catch (error) {\n        console.error('关闭对话框重置表单时出错:', error);\n      }\n    };\n\n    // 处理课程负责人变化\n    const handleCourseLeaderChange = value => {\n      if (value) {\n        // 如果开启课程负责人，默认选择第一个课程\n        if (!titleForm.courseId && courseList.value.length > 0) {\n          titleForm.courseId = courseList.value[0].id;\n          // 检查是否已有其他教师担任这一职称\n          titleForm.hasCourseLeader = teacherTitles.value.some(title => title.titleType === 1 && title.teacherId !== titleForm.teacherId && title.courseId === titleForm.courseId);\n        }\n      } else {\n        // 如果关闭，清空选择\n        titleForm.courseId = undefined;\n        titleForm.hasCourseLeader = false;\n      }\n    };\n\n    // 处理课程变化\n    const handleCourseChange = courseId => {\n      // 检查是否已有其他教师担任该课程负责人\n      titleForm.hasCourseLeader = teacherTitles.value.some(title => title.titleType === 1 && title.teacherId !== titleForm.teacherId && title.courseId === courseId);\n    };\n\n    // 处理专业负责人变化\n    const handleMajorLeaderChange = value => {\n      if (value) {\n        // 如果开启专业负责人，默认选择第一个专业\n        if (!titleForm.majorId && majorList.value.length > 0) {\n          titleForm.majorId = majorList.value[0].id;\n          // 检查是否已有其他教师担任这一职称\n          titleForm.hasMajorLeader = teacherTitles.value.some(title => title.titleType === 2 && title.teacherId !== titleForm.teacherId && title.majorId === titleForm.majorId);\n        }\n      } else {\n        // 如果关闭，清空选择\n        titleForm.majorId = undefined;\n        titleForm.hasMajorLeader = false;\n      }\n    };\n\n    // 处理专业变化\n    const handleMajorChange = majorId => {\n      // 检查是否已有其他教师担任该专业负责人\n      titleForm.hasMajorLeader = teacherTitles.value.some(title => title.titleType === 2 && title.teacherId !== titleForm.teacherId && title.majorId === majorId);\n    };\n\n    // 处理副院长变化\n    const handleViceDeanChange = value => {\n      if (value) {\n        // 如果开启副院长，默认选择第一个学院\n        if (!titleForm.collegeId && collegeList.value.length > 0) {\n          titleForm.collegeId = collegeList.value[0].id;\n          // 检查是否已有其他教师担任这一职称\n          titleForm.hasViceDean = teacherTitles.value.some(title => title.titleType === 3 && title.teacherId !== titleForm.teacherId && title.collegeId === titleForm.collegeId);\n        }\n      } else {\n        // 如果关闭，清空选择\n        titleForm.collegeId = undefined;\n        titleForm.hasViceDean = false;\n      }\n    };\n\n    // 处理学院变化\n    const handleCollegeChange = collegeId => {\n      // 检查是否已有其他教师担任该学院副院长\n      titleForm.hasViceDean = teacherTitles.value.some(title => title.titleType === 3 && title.teacherId !== titleForm.teacherId && title.collegeId === collegeId);\n    };\n    onMounted(() => {\n      fetchTeachers();\n      fetchTeacherTitles();\n      fetchCourses();\n      fetchMajors();\n      fetchColleges();\n    });\n    const __returned__ = {\n      queryParams,\n      teacherList,\n      teacherTitles,\n      total,\n      loading,\n      dialogVisible,\n      dialogTitle,\n      dialogType,\n      teacherFormRef,\n      teacherForm,\n      teacherRules,\n      titleDialogVisible,\n      titleFormRef,\n      currentTeacher,\n      titleForm,\n      courseList,\n      majorList,\n      collegeList,\n      fetchTeachers,\n      fetchTeacherTitles,\n      fetchCourses,\n      fetchMajors,\n      fetchColleges,\n      resetQuery,\n      handleCurrentChange,\n      handleSizeChange,\n      handleAdd,\n      handleEdit,\n      handleDelete,\n      handleStatusChange,\n      submitTeacherForm,\n      hasTitle,\n      handleSetTitle,\n      submitTitleForm,\n      handleTitleDialogClosed,\n      handleCourseLeaderChange,\n      handleCourseChange,\n      handleMajorLeaderChange,\n      handleMajorChange,\n      handleViceDeanChange,\n      handleCollegeChange,\n      ref,\n      reactive,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","ElMessage","ElMessageBox","axios","queryParams","pageNum","pageSize","realName","username","titleType","undefined","teacherList","teacherTitles","total","loading","dialogVisible","dialogTitle","dialogType","teacherFormRef","teacherForm","id","password","email","phone","status","role","teacherRules","required","message","trigger","min","max","type","titleDialogVisible","titleFormRef","currentTeacher","titleForm","teacherId","isNormalTeacher","isCourseLeader","isMajorLeader","isViceDean","courseId","majorId","collegeId","hasCourseLeader","hasMajorLeader","hasViceDean","courseList","majorList","collegeList","fetchTeachers","value","response","get","params","data","code","records","error","console","fetchTeacherTitles","fetchCourses","fetchMajors","fetchColleges","resetQuery","handleCurrentChange","val","handleSizeChange","handleAdd","handleEdit","row","handleDelete","confirm","confirmButtonText","cancelButtonText","then","delete","success","catch","handleStatusChange","put","submitTeacherForm","validate","valid","post","hasTitle","some","title","handleSetTitle","courseLeaderTitle","find","majorLeaderTitle","viceDeanTitle","length","submitTitleForm","warning","handleTitleDialogClosed","handleCourseLeaderChange","handleCourseChange","handleMajorLeaderChange","handleMajorChange","handleViceDeanChange","handleCollegeChange"],"sources":["C:/Users/18083/Desktop/CCIT/TCRSystem/TCRSystem/frontend/src/views/admin/TeacherManagement.vue"],"sourcesContent":["<template>\n  <div class=\"teacher-management\">\n    <h1>教师管理</h1>\n    \n    <el-card class=\"filter-card\">\n      <div class=\"filter-container\">\n        <el-form :inline=\"true\" :model=\"queryParams\" class=\"demo-form-inline\">\n          <el-form-item label=\"教师姓名\">\n            <el-input v-model=\"queryParams.realName\" placeholder=\"请输入教师姓名\" clearable></el-input>\n          </el-form-item>\n          <el-form-item label=\"工号\">\n            <el-input v-model=\"queryParams.username\" placeholder=\"请输入工号\" clearable></el-input>\n          </el-form-item>\n          <el-form-item label=\"职称\">\n            <el-select v-model=\"queryParams.titleType\" placeholder=\"请选择职称\" clearable>\n              <el-option label=\"普通教师\" :value=\"0\"></el-option>\n              <el-option label=\"课程负责人\" :value=\"1\"></el-option>\n              <el-option label=\"专业负责人\" :value=\"2\"></el-option>\n              <el-option label=\"副院长\" :value=\"3\"></el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" @click=\"fetchTeachers\">查询</el-button>\n            <el-button @click=\"resetQuery\">重置</el-button>\n          </el-form-item>\n        </el-form>\n      </div>\n      \n      <div class=\"operation-container\">\n        <el-button type=\"primary\" @click=\"handleAdd\">添加教师</el-button>\n      </div>\n    </el-card>\n    \n    <el-card class=\"table-card\">\n      <el-table :data=\"teacherList\" style=\"width: 100%\" v-loading=\"loading\">\n        <el-table-column prop=\"id\" label=\"ID\" width=\"80\"></el-table-column>\n        <el-table-column prop=\"username\" label=\"工号\" width=\"120\"></el-table-column>\n        <el-table-column prop=\"realName\" label=\"姓名\" width=\"120\"></el-table-column>\n        <el-table-column prop=\"email\" label=\"邮箱\"></el-table-column>\n        <el-table-column prop=\"phone\" label=\"手机号\"></el-table-column>\n        <el-table-column label=\"职称\">\n          <template #default=\"scope\">\n            <el-tag v-if=\"hasTitle(scope.row.id, 0)\" type=\"info\">普通教师</el-tag>\n            <el-tag v-if=\"hasTitle(scope.row.id, 1)\" type=\"success\">课程负责人</el-tag>\n            <el-tag v-if=\"hasTitle(scope.row.id, 2)\" type=\"warning\">专业负责人</el-tag>\n            <el-tag v-if=\"hasTitle(scope.row.id, 3)\" type=\"danger\">副院长</el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"状态\" width=\"100\">\n          <template #default=\"scope\">\n            <el-switch\n              v-model=\"scope.row.status\"\n              :active-value=\"1\"\n              :inactive-value=\"0\"\n              @change=\"handleStatusChange(scope.row)\"\n            ></el-switch>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"250\">\n          <template #default=\"scope\">\n            <el-button type=\"primary\" size=\"small\" @click=\"handleEdit(scope.row)\">编辑</el-button>\n            <el-button type=\"success\" size=\"small\" @click=\"handleSetTitle(scope.row)\">设置职称</el-button>\n            <el-button type=\"danger\" size=\"small\" @click=\"handleDelete(scope.row)\">删除</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      \n      <div class=\"pagination-container\">\n        <el-pagination\n          background\n          layout=\"total, sizes, prev, pager, next, jumper\"\n          :total=\"total\"\n          :page-size=\"queryParams.pageSize\"\n          :current-page=\"queryParams.pageNum\"\n          :page-sizes=\"[10, 20, 50, 100]\"\n          @current-change=\"handleCurrentChange\"\n          @size-change=\"handleSizeChange\"\n        ></el-pagination>\n      </div>\n    </el-card>\n    \n    <!-- 添加/编辑教师对话框 -->\n    <el-dialog :title=\"dialogTitle\" v-model=\"dialogVisible\" width=\"500px\">\n      <el-form :model=\"teacherForm\" :rules=\"teacherRules\" ref=\"teacherFormRef\" label-width=\"100px\">\n        <el-form-item label=\"工号\" prop=\"username\">\n          <el-input v-model=\"teacherForm.username\" placeholder=\"请输入工号\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"姓名\" prop=\"realName\">\n          <el-input v-model=\"teacherForm.realName\" placeholder=\"请输入姓名\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\" v-if=\"dialogType === 'add'\">\n          <el-input v-model=\"teacherForm.password\" placeholder=\"请输入密码\" show-password></el-input>\n        </el-form-item>\n        <el-form-item label=\"修改密码\" v-if=\"dialogType === 'edit'\">\n          <el-input v-model=\"teacherForm.password\" placeholder=\"不修改请留空\" show-password></el-input>\n          <span class=\"tip-text\">不修改密码请留空</span>\n        </el-form-item>\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"teacherForm.email\" placeholder=\"请输入邮箱\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"手机号\" prop=\"phone\">\n          <el-input v-model=\"teacherForm.phone\" placeholder=\"请输入手机号\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"状态\" prop=\"status\">\n          <el-radio-group v-model=\"teacherForm.status\">\n            <el-radio :label=\"1\">启用</el-radio>\n            <el-radio :label=\"0\">禁用</el-radio>\n          </el-radio-group>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitTeacherForm\">确定</el-button>\n        </span>\n      </template>\n    </el-dialog>\n    \n    <!-- 设置职称对话框 -->\n    <el-dialog title=\"设置教师职称\" v-model=\"titleDialogVisible\" width=\"600px\" @closed=\"handleTitleDialogClosed\">\n      <el-form :model=\"titleForm\" ref=\"titleFormRef\" label-width=\"120px\">\n        <el-form-item label=\"教师\">\n          <span>{{ currentTeacher.realName }}</span>\n        </el-form-item>\n        \n        <el-divider content-position=\"left\">职称设置</el-divider>\n        \n        <el-form-item label=\"普通教师\">\n          <el-switch v-model=\"titleForm.isNormalTeacher\"></el-switch>\n        </el-form-item>\n        \n        <template v-if=\"titleForm.isCourseLeader || !titleForm.hasCourseLeader\">\n          <el-form-item label=\"课程负责人\">\n            <el-switch v-model=\"titleForm.isCourseLeader\" @change=\"handleCourseLeaderChange\"></el-switch>\n            <div v-if=\"titleForm.isCourseLeader\" class=\"mt-10\">\n              <el-select \n                v-model=\"titleForm.courseId\" \n                placeholder=\"请选择负责的课程\" \n                style=\"width: 100%\" \n                filterable\n                :clearable=\"false\"\n                @change=\"handleCourseChange\"\n              >\n                <el-option\n                  v-for=\"course in courseList\"\n                  :key=\"course.id\"\n                  :label=\"course.name\"\n                  :value=\"course.id\"\n                ></el-option>\n              </el-select>\n            </div>\n          </el-form-item>\n        </template>\n        \n        <template v-if=\"titleForm.isMajorLeader || !titleForm.hasMajorLeader\">\n          <el-form-item label=\"专业负责人\">\n            <el-switch v-model=\"titleForm.isMajorLeader\" @change=\"handleMajorLeaderChange\"></el-switch>\n            <div v-if=\"titleForm.isMajorLeader\" class=\"mt-10\">\n              <el-select \n                v-model=\"titleForm.majorId\" \n                placeholder=\"请选择负责的专业\" \n                style=\"width: 100%\"\n                filterable\n                :clearable=\"false\"\n                @change=\"handleMajorChange\"\n              >\n                <el-option\n                  v-for=\"major in majorList\"\n                  :key=\"major.id\"\n                  :label=\"major.name\"\n                  :value=\"major.id\"\n                ></el-option>\n              </el-select>\n            </div>\n          </el-form-item>\n        </template>\n        \n        <template v-if=\"titleForm.isViceDean || !titleForm.hasViceDean\">\n          <el-form-item label=\"副院长\">\n            <el-switch v-model=\"titleForm.isViceDean\" @change=\"handleViceDeanChange\"></el-switch>\n            <div v-if=\"titleForm.isViceDean\" class=\"mt-10\">\n              <el-select \n                v-model=\"titleForm.collegeId\" \n                placeholder=\"请选择所属学院\" \n                style=\"width: 100%\"\n                filterable\n                :clearable=\"false\"\n                @change=\"handleCollegeChange\"\n              >\n                <el-option\n                  v-for=\"college in collegeList\"\n                  :key=\"college.id\"\n                  :label=\"college.name\"\n                  :value=\"college.id\"\n                ></el-option>\n              </el-select>\n            </div>\n          </el-form-item>\n        </template>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"titleDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitTitleForm\">确定</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from 'vue'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport axios from 'axios'\n\n// 查询参数\nconst queryParams = reactive({\n  pageNum: 1,\n  pageSize: 10,\n  realName: '',\n  username: '',\n  titleType: undefined\n})\n\n// 教师列表\nconst teacherList = ref([])\n// 教师职称列表\nconst teacherTitles = ref([])\n// 总数据条数\nconst total = ref(0)\n// 加载状态\nconst loading = ref(false)\n\n// 对话框相关\nconst dialogVisible = ref(false)\nconst dialogTitle = ref('')\nconst dialogType = ref('add') // add or edit\nconst teacherFormRef = ref(null)\nconst teacherForm = reactive({\n  id: undefined,\n  username: '',\n  realName: '',\n  password: '',\n  email: '',\n  phone: '',\n  status: 1,\n  role: 1 // 教师角色固定为1\n})\n\n// 教师表单验证规则\nconst teacherRules = {\n  username: [\n    { required: true, message: '请输入工号', trigger: 'blur' },\n    { min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur' }\n  ],\n  realName: [\n    { required: true, message: '请输入姓名', trigger: 'blur' }\n  ],\n  password: [\n    { required: dialogType === 'add', message: '请输入密码', trigger: 'blur' },\n    { min: 6, max: 20, message: '长度在 6 到 20 个字符', trigger: 'blur' }\n  ],\n  email: [\n    { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\n  ]\n}\n\n// 职称对话框相关\nconst titleDialogVisible = ref(false)\nconst titleFormRef = ref(null)\nconst currentTeacher = ref({})\nconst titleForm = reactive({\n  teacherId: undefined,\n  isNormalTeacher: false,\n  isCourseLeader: false,\n  isMajorLeader: false,\n  isViceDean: false,\n  courseId: undefined,\n  majorId: undefined,\n  collegeId: undefined,\n  hasCourseLeader: false,\n  hasMajorLeader: false,\n  hasViceDean: false\n})\n\n// 课程、专业、学院列表\nconst courseList = ref([])\nconst majorList = ref([])\nconst collegeList = ref([])\n\n// 获取教师列表\nconst fetchTeachers = async () => {\n  loading.value = true\n  try {\n    const response = await axios.get('/api/admin/teacher/list', {\n      params: queryParams\n    })\n    if (response.data.code === 200) {\n      teacherList.value = response.data.data.records\n      total.value = response.data.data.total\n    }\n  } catch (error) {\n    console.error('获取教师列表失败:', error)\n    ElMessage.error('获取教师列表失败')\n  } finally {\n    loading.value = false\n  }\n}\n\n// 获取教师职称列表\nconst fetchTeacherTitles = async () => {\n  try {\n    const response = await axios.get('/api/admin/teacher/titles')\n    if (response.data.code === 200) {\n      teacherTitles.value = response.data.data\n    }\n  } catch (error) {\n    console.error('获取教师职称列表失败:', error)\n    ElMessage.error('获取教师职称列表失败')\n  }\n}\n\n// 获取课程列表\nconst fetchCourses = async () => {\n  try {\n    const response = await axios.get('/api/course/list', {\n      params: { pageNum: 1, pageSize: 100 }\n    })\n    if (response.data.code === 200) {\n      courseList.value = response.data.data.records\n    }\n  } catch (error) {\n    console.error('获取课程列表失败:', error)\n    ElMessage.error('获取课程列表失败')\n  }\n}\n\n// 获取专业列表\nconst fetchMajors = async () => {\n  try {\n    const response = await axios.get('/api/admin/major/list')\n    if (response.data.code === 200) {\n      majorList.value = response.data.data\n    }\n  } catch (error) {\n    console.error('获取专业列表失败:', error)\n    ElMessage.error('获取专业列表失败')\n  }\n}\n\n// 获取学院列表\nconst fetchColleges = async () => {\n  try {\n    const response = await axios.get('/api/admin/college/list')\n    if (response.data.code === 200) {\n      collegeList.value = response.data.data\n    }\n  } catch (error) {\n    console.error('获取学院列表失败:', error)\n    ElMessage.error('获取学院列表失败')\n  }\n}\n\n// 重置查询条件\nconst resetQuery = () => {\n  queryParams.realName = ''\n  queryParams.username = ''\n  queryParams.titleType = undefined\n  fetchTeachers()\n}\n\n// 处理页码变化\nconst handleCurrentChange = (val) => {\n  queryParams.pageNum = val\n  fetchTeachers()\n}\n\n// 处理每页条数变化\nconst handleSizeChange = (val) => {\n  queryParams.pageSize = val\n  fetchTeachers()\n}\n\n// 处理添加教师\nconst handleAdd = () => {\n  dialogType.value = 'add'\n  dialogTitle.value = '添加教师'\n  teacherForm.id = undefined\n  teacherForm.username = ''\n  teacherForm.realName = ''\n  teacherForm.password = ''\n  teacherForm.email = ''\n  teacherForm.phone = ''\n  teacherForm.status = 1\n  teacherForm.role = 1\n  dialogVisible.value = true\n}\n\n// 处理编辑教师\nconst handleEdit = (row) => {\n  dialogType.value = 'edit'\n  dialogTitle.value = '编辑教师'\n  teacherForm.id = row.id\n  teacherForm.username = row.username\n  teacherForm.realName = row.realName\n  teacherForm.password = '' // 清空密码字段\n  teacherForm.email = row.email\n  teacherForm.phone = row.phone\n  teacherForm.status = row.status\n  teacherForm.role = row.role\n  dialogVisible.value = true\n}\n\n// 处理删除教师\nconst handleDelete = (row) => {\n  ElMessageBox.confirm('确定要删除该教师吗？', '提示', {\n    confirmButtonText: '确定',\n    cancelButtonText: '取消',\n    type: 'warning'\n  }).then(async () => {\n    try {\n      const response = await axios.delete(`/api/admin/teacher/${row.id}`)\n      if (response.data.code === 200) {\n        ElMessage.success('删除成功')\n        fetchTeachers()\n      } else {\n        ElMessage.error(response.data.message || '删除失败')\n      }\n    } catch (error) {\n      console.error('删除教师失败:', error)\n      ElMessage.error('删除教师失败')\n    }\n  }).catch(() => {})\n}\n\n// 处理状态变化\nconst handleStatusChange = async (row) => {\n  try {\n    const response = await axios.put('/api/admin/teacher/status', {\n      id: row.id,\n      status: row.status\n    })\n    if (response.data.code === 200) {\n      ElMessage.success(`${row.status === 1 ? '启用' : '禁用'}成功`)\n    } else {\n      ElMessage.error(response.data.message || '操作失败')\n      // 恢复原状态\n      row.status = row.status === 1 ? 0 : 1\n    }\n  } catch (error) {\n    console.error('修改状态失败:', error)\n    ElMessage.error('修改状态失败')\n    // 恢复原状态\n    row.status = row.status === 1 ? 0 : 1\n  }\n}\n\n// 提交教师表单\nconst submitTeacherForm = () => {\n  teacherFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        let response\n        if (dialogType.value === 'add') {\n          response = await axios.post('/api/admin/teacher', teacherForm)\n        } else {\n          response = await axios.put('/api/admin/teacher', teacherForm)\n        }\n        \n        if (response.data.code === 200) {\n          ElMessage.success(dialogType.value === 'add' ? '添加成功' : '修改成功')\n          dialogVisible.value = false\n          fetchTeachers()\n        } else {\n          ElMessage.error(response.data.message || (dialogType.value === 'add' ? '添加失败' : '修改失败'))\n        }\n      } catch (error) {\n        console.error(dialogType.value === 'add' ? '添加教师失败:' : '修改教师失败:', error)\n        ElMessage.error(dialogType.value === 'add' ? '添加教师失败' : '修改教师失败')\n      }\n    }\n  })\n}\n\n// 判断教师是否有指定职称\nconst hasTitle = (teacherId, titleType) => {\n  return teacherTitles.value.some(title => \n    title.teacherId === teacherId && title.titleType === titleType\n  )\n}\n\n// 处理设置职称\nconst handleSetTitle = async (row) => {\n  try {\n    currentTeacher.value = row\n    titleForm.teacherId = row.id\n    \n    // 初始化职称表单\n    titleForm.isNormalTeacher = hasTitle(row.id, 0)\n    titleForm.isCourseLeader = hasTitle(row.id, 1)\n    titleForm.isMajorLeader = hasTitle(row.id, 2)\n    titleForm.isViceDean = hasTitle(row.id, 3)\n    \n    // 获取当前职称对应的课程、专业、学院ID\n    const courseLeaderTitle = teacherTitles.value.find(title => \n      title.teacherId === row.id && title.titleType === 1\n    )\n    titleForm.courseId = courseLeaderTitle ? courseLeaderTitle.courseId : undefined\n    \n    const majorLeaderTitle = teacherTitles.value.find(title => \n      title.teacherId === row.id && title.titleType === 2\n    )\n    titleForm.majorId = majorLeaderTitle ? majorLeaderTitle.majorId : undefined\n    \n    const viceDeanTitle = teacherTitles.value.find(title => \n      title.teacherId === row.id && title.titleType === 3\n    )\n    titleForm.collegeId = viceDeanTitle ? viceDeanTitle.collegeId : undefined\n    \n    // 如果是课程负责人但没有选择课程，则默认选择第一个课程\n    if (titleForm.isCourseLeader && !titleForm.courseId && courseList.value.length > 0) {\n      titleForm.courseId = courseList.value[0].id\n    }\n    \n    // 如果是专业负责人但没有选择专业，则默认选择第一个专业\n    if (titleForm.isMajorLeader && !titleForm.majorId && majorList.value.length > 0) {\n      titleForm.majorId = majorList.value[0].id\n    }\n    \n    // 如果是副院长但没有选择学院，则默认选择第一个学院\n    if (titleForm.isViceDean && !titleForm.collegeId && collegeList.value.length > 0) {\n      titleForm.collegeId = collegeList.value[0].id\n    }\n    \n    // 检查是否已有其他教师担任这些职称\n    if (titleForm.courseId) {\n      titleForm.hasCourseLeader = teacherTitles.value.some(title => \n        title.titleType === 1 && title.teacherId !== row.id && title.courseId === titleForm.courseId\n      )\n    } else {\n      titleForm.hasCourseLeader = false\n    }\n    \n    if (titleForm.majorId) {\n      titleForm.hasMajorLeader = teacherTitles.value.some(title => \n        title.titleType === 2 && title.teacherId !== row.id && title.majorId === titleForm.majorId\n      )\n    } else {\n      titleForm.hasMajorLeader = false\n    }\n    \n    if (titleForm.collegeId) {\n      titleForm.hasViceDean = teacherTitles.value.some(title => \n        title.titleType === 3 && title.teacherId !== row.id && title.collegeId === titleForm.collegeId\n      )\n    } else {\n      titleForm.hasViceDean = false\n    }\n    \n    titleDialogVisible.value = true\n  } catch (error) {\n    console.error('设置教师职称时出错:', error)\n    ElMessage.error('设置教师职称时出错，请刷新页面后重试')\n  }\n}\n\n// 提交职称表单\nconst submitTitleForm = async () => {\n  try {\n    // 验证必填项\n    if (titleForm.isCourseLeader && !titleForm.courseId) {\n      ElMessage.warning('请选择负责的课程')\n      return\n    }\n    \n    if (titleForm.isMajorLeader && !titleForm.majorId) {\n      ElMessage.warning('请选择负责的专业')\n      return\n    }\n    \n    if (titleForm.isViceDean && !titleForm.collegeId) {\n      ElMessage.warning('请选择所属学院')\n      return\n    }\n    \n    const response = await axios.post('/api/admin/teacher/titles', {\n      teacherId: titleForm.teacherId,\n      isNormalTeacher: titleForm.isNormalTeacher,\n      isCourseLeader: titleForm.isCourseLeader,\n      isMajorLeader: titleForm.isMajorLeader,\n      isViceDean: titleForm.isViceDean,\n      courseId: titleForm.courseId,\n      majorId: titleForm.majorId,\n      collegeId: titleForm.collegeId\n    })\n    \n    if (response.data.code === 200) {\n      ElMessage.success('设置职称成功')\n      titleDialogVisible.value = false\n      fetchTeacherTitles()\n      fetchTeachers()\n    } else {\n      ElMessage.error(response.data.message || '设置职称失败')\n    }\n  } catch (error) {\n    console.error('设置职称失败:', error)\n    ElMessage.error('设置职称失败，请刷新页面后重试')\n  }\n}\n\n// 处理职称对话框关闭\nconst handleTitleDialogClosed = () => {\n  try {\n    // 重置职称表单\n    titleForm.teacherId = undefined\n    titleForm.isNormalTeacher = false\n    titleForm.isCourseLeader = false\n    titleForm.isMajorLeader = false\n    titleForm.isViceDean = false\n    titleForm.courseId = undefined\n    titleForm.majorId = undefined\n    titleForm.collegeId = undefined\n    titleForm.hasCourseLeader = false\n    titleForm.hasMajorLeader = false\n    titleForm.hasViceDean = false\n    \n    // 清空当前选中教师\n    currentTeacher.value = {}\n  } catch (error) {\n    console.error('关闭对话框重置表单时出错:', error)\n  }\n}\n\n// 处理课程负责人变化\nconst handleCourseLeaderChange = (value) => {\n  if (value) {\n    // 如果开启课程负责人，默认选择第一个课程\n    if (!titleForm.courseId && courseList.value.length > 0) {\n      titleForm.courseId = courseList.value[0].id\n      // 检查是否已有其他教师担任这一职称\n      titleForm.hasCourseLeader = teacherTitles.value.some(title => \n        title.titleType === 1 && title.teacherId !== titleForm.teacherId && title.courseId === titleForm.courseId\n      )\n    }\n  } else {\n    // 如果关闭，清空选择\n    titleForm.courseId = undefined\n    titleForm.hasCourseLeader = false\n  }\n}\n\n// 处理课程变化\nconst handleCourseChange = (courseId) => {\n  // 检查是否已有其他教师担任该课程负责人\n  titleForm.hasCourseLeader = teacherTitles.value.some(title => \n    title.titleType === 1 && title.teacherId !== titleForm.teacherId && title.courseId === courseId\n  )\n}\n\n// 处理专业负责人变化\nconst handleMajorLeaderChange = (value) => {\n  if (value) {\n    // 如果开启专业负责人，默认选择第一个专业\n    if (!titleForm.majorId && majorList.value.length > 0) {\n      titleForm.majorId = majorList.value[0].id\n      // 检查是否已有其他教师担任这一职称\n      titleForm.hasMajorLeader = teacherTitles.value.some(title => \n        title.titleType === 2 && title.teacherId !== titleForm.teacherId && title.majorId === titleForm.majorId\n      )\n    }\n  } else {\n    // 如果关闭，清空选择\n    titleForm.majorId = undefined\n    titleForm.hasMajorLeader = false\n  }\n}\n\n// 处理专业变化\nconst handleMajorChange = (majorId) => {\n  // 检查是否已有其他教师担任该专业负责人\n  titleForm.hasMajorLeader = teacherTitles.value.some(title => \n    title.titleType === 2 && title.teacherId !== titleForm.teacherId && title.majorId === majorId\n  )\n}\n\n// 处理副院长变化\nconst handleViceDeanChange = (value) => {\n  if (value) {\n    // 如果开启副院长，默认选择第一个学院\n    if (!titleForm.collegeId && collegeList.value.length > 0) {\n      titleForm.collegeId = collegeList.value[0].id\n      // 检查是否已有其他教师担任这一职称\n      titleForm.hasViceDean = teacherTitles.value.some(title => \n        title.titleType === 3 && title.teacherId !== titleForm.teacherId && title.collegeId === titleForm.collegeId\n      )\n    }\n  } else {\n    // 如果关闭，清空选择\n    titleForm.collegeId = undefined\n    titleForm.hasViceDean = false\n  }\n}\n\n// 处理学院变化\nconst handleCollegeChange = (collegeId) => {\n  // 检查是否已有其他教师担任该学院副院长\n  titleForm.hasViceDean = teacherTitles.value.some(title => \n    title.titleType === 3 && title.teacherId !== titleForm.teacherId && title.collegeId === collegeId\n  )\n}\n\nonMounted(() => {\n  fetchTeachers()\n  fetchTeacherTitles()\n  fetchCourses()\n  fetchMajors()\n  fetchColleges()\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.teacher-management {\n  h1 {\n    margin-bottom: 20px;\n  }\n  \n  .filter-card {\n    margin-bottom: 20px;\n  }\n  \n  .operation-container {\n    margin-top: 20px;\n    display: flex;\n    justify-content: flex-end;\n  }\n  \n  .table-card {\n    margin-bottom: 20px;\n  }\n  \n  .pagination-container {\n    margin-top: 20px;\n    display: flex;\n    justify-content: flex-end;\n  }\n  \n  .mt-10 {\n    margin-top: 10px;\n  }\n}\n\n.tip-text {\n  color: #909399;\n  font-size: 12px;\n  margin-top: 5px;\n  display: block;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}