{"ast":null,"code":"import { ref, reactive, computed, onMounted } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport axios from 'axios';\n\n// 状态变量\n\nexport default {\n  __name: 'ResourceSharing',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const loading = ref(false);\n    const materialList = ref([]);\n    const courseList = ref([]);\n    const materialTypes = ref([]);\n    const academicYears = ref([]);\n    const total = ref(0);\n    const courseMap = ref({});\n    const currentTeacherId = ref(null);\n    const currentTeacherCourses = ref([]);\n\n    // 查询参数\n    const queryParams = reactive({\n      current: 1,\n      pageSize: 10,\n      courseId: null,\n      academicYear: null,\n      semester: null,\n      materialTypeId: null\n    });\n\n    // 计算当前课程是否有材料\n    const hasCourseMaterials = computed(() => {\n      if (!queryParams.courseId) return false;\n      return materialList.value.some(material => material.course_id === queryParams.courseId && material.upload_user_id !== currentTeacherId.value);\n    });\n\n    // 是否只显示同课程教师的材料\n    const teacherMaterialsOnly = computed(() => !!queryParams.courseId);\n\n    // 获取当前教师可访问的课程\n    const fetchTeacherCourses = async () => {\n      try {\n        // 获取用户信息\n        const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n        currentTeacherId.value = userInfo.id;\n        if (!currentTeacherId.value) {\n          ElMessage.warning('无法获取用户信息，请重新登录');\n          return;\n        }\n        const response = await axios.get(`/api/course/teacher/${currentTeacherId.value}`);\n        courseList.value = response.data.data || [];\n\n        // 创建课程映射，方便查询\n        courseList.value.forEach(course => {\n          courseMap.value[course.id] = course;\n\n          // 记录当前教师的课程ID，用于安全管理\n          currentTeacherCourses.value.push(course.id);\n        });\n      } catch (error) {\n        console.error('获取教师课程失败:', error);\n        ElMessage.error('获取教师课程失败');\n      }\n    };\n\n    // 获取材料类型列表\n    const fetchMaterialTypes = async () => {\n      try {\n        const response = await axios.get('/api/material-type/list');\n        materialTypes.value = response.data.data || [];\n      } catch (error) {\n        console.error('获取材料类型失败:', error);\n        ElMessage.error('获取材料类型失败');\n      }\n    };\n\n    // 生成学年列表\n    const generateAcademicYears = () => {\n      const currentYear = new Date().getFullYear();\n      const years = [];\n      for (let i = 0; i < 5; i++) {\n        const year = currentYear - i;\n        years.push(`${year}-${year + 1}`);\n      }\n      academicYears.value = years;\n    };\n\n    // 查询教学资源\n    const fetchMaterials = async () => {\n      loading.value = true;\n      try {\n        // 调用后端API获取教学资源\n        const params = {\n          ...queryParams\n        };\n\n        // 安全管理：只能查看同一课程的教学资源\n        if (!params.courseId && currentTeacherCourses.value.length > 0) {\n          // 转换为字符串，便于后端解析\n          params.courseIdsStr = currentTeacherCourses.value.join(',');\n        }\n\n        // 确保semester是数字类型\n        if (params.semester !== null && params.semester !== undefined) {\n          params.semester = Number(params.semester);\n        }\n\n        // 确保materialTypeId是数字类型\n        if (params.materialTypeId !== null && params.materialTypeId !== undefined) {\n          params.materialTypeId = Number(params.materialTypeId);\n        }\n        console.log('查询参数：', params);\n        const response = await axios.get('/api/material/shared', {\n          params\n        });\n        if (response.data.code === 200) {\n          // 处理并格式化返回的数据\n          const records = response.data.data.records || [];\n          materialList.value = records.map(record => {\n            // 确保所有必要字段都存在\n            return {\n              ...record,\n              // 如果缺少某些字段，使用默认值\n              material_type_name: record.material_type_name || '未知类型',\n              course_name: record.course_name || '未知课程',\n              academic_year: record.academic_year || '未知学年',\n              // 确保学期为数字类型\n              semester: record.semester ? Number(record.semester) : null\n            };\n          });\n          total.value = response.data.data.total || 0;\n\n          // 打印查询结果，检查字段\n          console.log('获取到的材料列表:', materialList.value);\n          if (materialList.value.length > 0) {\n            console.log('第一条材料数据样例:', materialList.value[0]);\n            console.log('材料类型名称:', materialList.value[0].material_type_name);\n            console.log('学年:', materialList.value[0].academic_year);\n            console.log('学期:', materialList.value[0].semester, '类型:', typeof materialList.value[0].semester);\n          }\n\n          // 检查是否有课程材料用于同步\n          if (queryParams.courseId) {\n            console.log('检查材料：', materialList.value);\n          }\n        } else {\n          ElMessage.error(response.data.message || '获取教学资源失败');\n        }\n      } catch (error) {\n        console.error('获取教学资源失败:', error);\n        ElMessage.error('获取教学资源失败：' + (error.response?.data?.message || error.message || '未知错误'));\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 重置查询条件\n    const resetQuery = () => {\n      queryParams.courseId = null;\n      queryParams.academicYear = null;\n      queryParams.semester = null;\n      queryParams.materialTypeId = null;\n      queryParams.current = 1;\n      fetchMaterials();\n    };\n\n    // 处理课程变化\n    const handleCourseChange = () => {\n      queryParams.current = 1;\n      fetchMaterials();\n    };\n\n    // 处理页码变化\n    const handleCurrentChange = current => {\n      queryParams.current = current;\n      fetchMaterials();\n    };\n\n    // 处理每页条数变化\n    const handleSizeChange = size => {\n      queryParams.pageSize = size;\n      queryParams.current = 1;\n      fetchMaterials();\n    };\n\n    // 下载教学资源\n    const downloadMaterial = material => {\n      if (!material.id) {\n        ElMessage.warning('材料ID为空');\n        return;\n      }\n      try {\n        // 创建下载链接 - 使用完整的API路径\n        const downloadUrl = `/api/material/download/${material.id}`;\n\n        // 创建一个隐藏的a标签，用于下载\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.setAttribute('download', ''); // 强制使用下载属性\n        document.body.appendChild(link);\n        link.click();\n\n        // 清理DOM\n        setTimeout(() => {\n          document.body.removeChild(link);\n        }, 100);\n\n        // 记录下载次数\n        axios.post(`/api/material/download/${material.id}`).catch(error => console.error('更新下载次数失败:', error));\n        ElMessage.success('开始下载文件');\n      } catch (error) {\n        console.error('下载文件失败:', error);\n        ElMessage.error('下载文件失败');\n      }\n    };\n\n    // 同步教学大纲或授课计划\n    const syncMaterials = async materialTypeName => {\n      if (!queryParams.courseId) {\n        ElMessage.warning('请先选择课程');\n        return;\n      }\n      try {\n        loading.value = true;\n\n        // 查找对应的材料类型ID\n        const materialTypeId = materialTypes.value.find(type => type.name === materialTypeName)?.id;\n        if (!materialTypeId) {\n          ElMessage.warning(`未找到${materialTypeName}材料类型`);\n          return;\n        }\n\n        // 查询同一课程其他教师上传的教学大纲或授课计划\n        const params = {\n          courseId: queryParams.courseId,\n          materialTypeId,\n          excludeUserId: currentTeacherId.value\n        };\n        const response = await axios.get('/api/material/course-shared', {\n          params\n        });\n        const materials = response.data.data || [];\n        if (!materials.length) {\n          ElMessage.warning(`当前课程没有其他教师上传的${materialTypeName}`);\n          return;\n        }\n\n        // 显示确认对话框\n        await ElMessageBox.confirm(`确定要同步本课程的${materialTypeName}吗？共${materials.length}份资料将被下载。`, '确认同步', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'info'\n        });\n\n        // 批量下载确认\n        ElMessage.success(`正在同步${materials.length}份${materialTypeName}资料，请在弹出的窗口中查看`);\n\n        // 延迟一点时间，避免浏览器阻止批量下载\n        for (let i = 0; i < materials.length; i++) {\n          setTimeout(() => {\n            // 使用下载API\n            const downloadUrl = `/api/material/download/${materials[i].id}`;\n            window.open(downloadUrl, '_blank');\n\n            // 记录下载\n            axios.post(`/api/material/download/${materials[i].id}`).catch(error => console.error('更新下载次数失败:', error));\n          }, i * 1000); // 每次下载间隔1秒\n        }\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error(`同步${materialTypeName}失败:`, error);\n          ElMessage.error(`同步${materialTypeName}失败`);\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 页面加载时获取数据\n    onMounted(() => {\n      fetchTeacherCourses();\n      fetchMaterialTypes();\n      generateAcademicYears();\n      fetchMaterials();\n    });\n    const __returned__ = {\n      loading,\n      materialList,\n      courseList,\n      materialTypes,\n      academicYears,\n      total,\n      courseMap,\n      currentTeacherId,\n      currentTeacherCourses,\n      queryParams,\n      hasCourseMaterials,\n      teacherMaterialsOnly,\n      fetchTeacherCourses,\n      fetchMaterialTypes,\n      generateAcademicYears,\n      fetchMaterials,\n      resetQuery,\n      handleCourseChange,\n      handleCurrentChange,\n      handleSizeChange,\n      downloadMaterial,\n      syncMaterials,\n      ref,\n      reactive,\n      computed,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","ElMessage","ElMessageBox","axios","loading","materialList","courseList","materialTypes","academicYears","total","courseMap","currentTeacherId","currentTeacherCourses","queryParams","current","pageSize","courseId","academicYear","semester","materialTypeId","hasCourseMaterials","value","some","material","course_id","upload_user_id","teacherMaterialsOnly","fetchTeacherCourses","userInfo","JSON","parse","localStorage","getItem","id","warning","response","get","data","forEach","course","push","error","console","fetchMaterialTypes","generateAcademicYears","currentYear","Date","getFullYear","years","i","year","fetchMaterials","params","length","courseIdsStr","join","undefined","Number","log","code","records","map","record","material_type_name","course_name","academic_year","message","resetQuery","handleCourseChange","handleCurrentChange","handleSizeChange","size","downloadMaterial","downloadUrl","link","document","createElement","href","setAttribute","body","appendChild","click","setTimeout","removeChild","post","catch","success","syncMaterials","materialTypeName","find","type","name","excludeUserId","materials","confirm","confirmButtonText","cancelButtonText","window","open"],"sources":["C:/Users/18083/Desktop/CCIT/TCRSystem/TCRSystem/frontend/src/views/teacher/ResourceSharing.vue"],"sourcesContent":["<template>\r\n  <div class=\"resource-sharing-container\">\r\n    <h1>课程资源协同</h1>\r\n    \r\n    <!-- 查询过滤卡片 -->\r\n    <el-card class=\"filter-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <span>查询与下载</span>\r\n        </div>\r\n      </template>\r\n      \r\n      <el-form :inline=\"true\" :model=\"queryParams\" class=\"filter-form\">\r\n        <el-form-item label=\"课程\">\r\n          <el-select \r\n            v-model=\"queryParams.courseId\" \r\n            placeholder=\"选择课程\" \r\n            clearable \r\n            filterable\r\n            style=\"width: 220px;\"\r\n            @change=\"handleCourseChange\"\r\n          >\r\n            <el-option\r\n              v-for=\"course in courseList\"\r\n              :key=\"course.id\"\r\n              :label=\"course.name\"\r\n              :value=\"course.id\"\r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"学年\">\r\n          <el-select \r\n            v-model=\"queryParams.academicYear\" \r\n            placeholder=\"选择学年\" \r\n            clearable \r\n            style=\"width: 150px;\"\r\n          >\r\n            <el-option\r\n              v-for=\"year in academicYears\"\r\n              :key=\"year\"\r\n              :label=\"year\"\r\n              :value=\"year\"\r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"学期\">\r\n          <el-select \r\n            v-model=\"queryParams.semester\" \r\n            placeholder=\"选择学期\" \r\n            clearable \r\n            style=\"width: 150px;\"\r\n          >\r\n            <el-option label=\"第一学期\" :value=\"1\"></el-option>\r\n            <el-option label=\"第二学期\" :value=\"2\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"材料类型\">\r\n          <el-select \r\n            v-model=\"queryParams.materialTypeId\" \r\n            placeholder=\"选择材料类型\" \r\n            clearable \r\n            style=\"width: 150px;\"\r\n          >\r\n            <el-option\r\n              v-for=\"type in materialTypes\"\r\n              :key=\"type.id\"\r\n              :label=\"type.name\"\r\n              :value=\"type.id\"\r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"fetchMaterials\">查询</el-button>\r\n          <el-button @click=\"resetQuery\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n    \r\n    <!-- 同步教学大纲和授课计划按钮 -->\r\n    <el-card class=\"sync-card\" v-if=\"queryParams.courseId\">\r\n      <div class=\"sync-actions\">\r\n        <el-button \r\n          type=\"primary\" \r\n          icon=\"Download\" \r\n          @click=\"syncMaterials('教学大纲')\"\r\n          :disabled=\"!hasCourseMaterials\"\r\n        >\r\n          同步本课程教学大纲\r\n        </el-button>\r\n        <el-button \r\n          type=\"success\" \r\n          icon=\"Download\" \r\n          @click=\"syncMaterials('授课计划')\"\r\n          :disabled=\"!hasCourseMaterials\"\r\n        >\r\n          同步本课程授课计划\r\n        </el-button>\r\n      </div>\r\n      <div class=\"sync-tip\" v-if=\"queryParams.courseId && !hasCourseMaterials\">\r\n        <el-alert\r\n          title=\"当前课程暂无其他教师上传的教学大纲或授课计划\"\r\n          type=\"info\"\r\n          show-icon\r\n          :closable=\"false\"\r\n        />\r\n      </div>\r\n    </el-card>\r\n    \r\n    <!-- 材料列表 -->\r\n    <el-card v-loading=\"loading\" class=\"materials-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <span>\r\n            {{ queryParams.courseId ? courseMap[queryParams.courseId]?.name || '所有课程' : '所有课程' }} 教学资源\r\n          </span>\r\n          <el-tag v-if=\"teacherMaterialsOnly\" type=\"success\">仅显示同课程教师的材料</el-tag>\r\n        </div>\r\n      </template>\r\n      \r\n      <div class=\"materials-tip\" v-if=\"!materialList.length && !loading\">\r\n        <el-empty description=\"暂无符合条件的教学资源\"></el-empty>\r\n      </div>\r\n      \r\n      <el-table \r\n        v-else \r\n        :data=\"materialList\" \r\n        style=\"width: 100%\"\r\n        border\r\n      >\r\n        <el-table-column prop=\"name\" label=\"材料名称\" min-width=\"180\" show-overflow-tooltip />\r\n        <el-table-column prop=\"course_name\" label=\"所属课程\" width=\"150\" show-overflow-tooltip />\r\n        <el-table-column prop=\"material_type_name\" label=\"材料类型\" width=\"120\">\r\n          <template #default=\"scope\">\r\n            {{ scope.row.material_type_name || '未知类型' }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"academic_year\" label=\"学年\" width=\"100\">\r\n          <template #default=\"scope\">\r\n            {{ scope.row.academic_year || '未知学年' }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"semester\" label=\"学期\" width=\"80\">\r\n          <template #default=\"scope\">\r\n            {{ scope.row.semester === 1 ? '第一学期' : scope.row.semester === 2 ? '第二学期' : '未知学期' }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"description\" label=\"描述\" min-width=\"150\" show-overflow-tooltip />\r\n        <el-table-column prop=\"upload_user_name\" label=\"上传教师\" width=\"120\" />\r\n        <el-table-column prop=\"create_time\" label=\"上传时间\" width=\"180\" />\r\n        <el-table-column label=\"操作\" width=\"120\" fixed=\"right\">\r\n          <template #default=\"scope\">\r\n            <el-button \r\n              type=\"primary\" \r\n              size=\"small\" \r\n              icon=\"Download\" \r\n              circle \r\n              plain\r\n              @click=\"downloadMaterial(scope.row)\"\r\n              title=\"下载\"\r\n            />\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      \r\n      <div class=\"pagination-container\">\r\n        <el-pagination\r\n          background\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          :total=\"total\"\r\n          :page-sizes=\"[10, 20, 50, 100]\"\r\n          :page-size=\"queryParams.pageSize\"\r\n          :current-page=\"queryParams.current\"\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n        />\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, onMounted } from 'vue'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\nimport axios from 'axios'\r\n\r\n// 状态变量\r\nconst loading = ref(false)\r\nconst materialList = ref([])\r\nconst courseList = ref([])\r\nconst materialTypes = ref([])\r\nconst academicYears = ref([])\r\nconst total = ref(0)\r\nconst courseMap = ref({})\r\nconst currentTeacherId = ref(null)\r\nconst currentTeacherCourses = ref([])\r\n\r\n// 查询参数\r\nconst queryParams = reactive({\r\n  current: 1,\r\n  pageSize: 10,\r\n  courseId: null,\r\n  academicYear: null,\r\n  semester: null,\r\n  materialTypeId: null\r\n})\r\n\r\n// 计算当前课程是否有材料\r\nconst hasCourseMaterials = computed(() => {\r\n  if (!queryParams.courseId) return false\r\n  return materialList.value.some(material => \r\n    material.course_id === queryParams.courseId && \r\n    material.upload_user_id !== currentTeacherId.value\r\n  )\r\n})\r\n\r\n// 是否只显示同课程教师的材料\r\nconst teacherMaterialsOnly = computed(() => !!queryParams.courseId)\r\n\r\n// 获取当前教师可访问的课程\r\nconst fetchTeacherCourses = async () => {\r\n  try {\r\n    // 获取用户信息\r\n    const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}')\r\n    currentTeacherId.value = userInfo.id\r\n    \r\n    if (!currentTeacherId.value) {\r\n      ElMessage.warning('无法获取用户信息，请重新登录')\r\n      return\r\n    }\r\n    \r\n    const response = await axios.get(`/api/course/teacher/${currentTeacherId.value}`)\r\n    courseList.value = response.data.data || []\r\n    \r\n    // 创建课程映射，方便查询\r\n    courseList.value.forEach(course => {\r\n      courseMap.value[course.id] = course\r\n      \r\n      // 记录当前教师的课程ID，用于安全管理\r\n      currentTeacherCourses.value.push(course.id)\r\n    })\r\n  } catch (error) {\r\n    console.error('获取教师课程失败:', error)\r\n    ElMessage.error('获取教师课程失败')\r\n  }\r\n}\r\n\r\n// 获取材料类型列表\r\nconst fetchMaterialTypes = async () => {\r\n  try {\r\n    const response = await axios.get('/api/material-type/list')\r\n    materialTypes.value = response.data.data || []\r\n  } catch (error) {\r\n    console.error('获取材料类型失败:', error)\r\n    ElMessage.error('获取材料类型失败')\r\n  }\r\n}\r\n\r\n// 生成学年列表\r\nconst generateAcademicYears = () => {\r\n  const currentYear = new Date().getFullYear()\r\n  const years = []\r\n  for (let i = 0; i < 5; i++) {\r\n    const year = currentYear - i\r\n    years.push(`${year}-${year + 1}`)\r\n  }\r\n  academicYears.value = years\r\n}\r\n\r\n// 查询教学资源\r\nconst fetchMaterials = async () => {\r\n  loading.value = true;\r\n  try {\r\n    // 调用后端API获取教学资源\r\n    const params = { ...queryParams }\r\n    \r\n    // 安全管理：只能查看同一课程的教学资源\r\n    if (!params.courseId && currentTeacherCourses.value.length > 0) {\r\n      // 转换为字符串，便于后端解析\r\n      params.courseIdsStr = currentTeacherCourses.value.join(',');\r\n    }\r\n    \r\n    // 确保semester是数字类型\r\n    if (params.semester !== null && params.semester !== undefined) {\r\n      params.semester = Number(params.semester);\r\n    }\r\n    \r\n    // 确保materialTypeId是数字类型\r\n    if (params.materialTypeId !== null && params.materialTypeId !== undefined) {\r\n      params.materialTypeId = Number(params.materialTypeId);\r\n    }\r\n    \r\n    console.log('查询参数：', params)\r\n    \r\n    const response = await axios.get('/api/material/shared', { params })\r\n    if (response.data.code === 200) {\r\n      // 处理并格式化返回的数据\r\n      const records = response.data.data.records || [];\r\n      materialList.value = records.map(record => {\r\n        // 确保所有必要字段都存在\r\n        return {\r\n          ...record,\r\n          // 如果缺少某些字段，使用默认值\r\n          material_type_name: record.material_type_name || '未知类型',\r\n          course_name: record.course_name || '未知课程',\r\n          academic_year: record.academic_year || '未知学年',\r\n          // 确保学期为数字类型\r\n          semester: record.semester ? Number(record.semester) : null\r\n        };\r\n      });\r\n      \r\n      total.value = response.data.data.total || 0;\r\n      \r\n      // 打印查询结果，检查字段\r\n      console.log('获取到的材料列表:', materialList.value);\r\n      if (materialList.value.length > 0) {\r\n        console.log('第一条材料数据样例:', materialList.value[0]);\r\n        console.log('材料类型名称:', materialList.value[0].material_type_name);\r\n        console.log('学年:', materialList.value[0].academic_year);\r\n        console.log('学期:', materialList.value[0].semester, '类型:', typeof materialList.value[0].semester);\r\n      }\r\n      \r\n      // 检查是否有课程材料用于同步\r\n      if (queryParams.courseId) {\r\n        console.log('检查材料：', materialList.value)\r\n      }\r\n    } else {\r\n      ElMessage.error(response.data.message || '获取教学资源失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('获取教学资源失败:', error)\r\n    ElMessage.error('获取教学资源失败：' + (error.response?.data?.message || error.message || '未知错误'))\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 重置查询条件\r\nconst resetQuery = () => {\r\n  queryParams.courseId = null\r\n  queryParams.academicYear = null\r\n  queryParams.semester = null\r\n  queryParams.materialTypeId = null\r\n  queryParams.current = 1\r\n  fetchMaterials()\r\n}\r\n\r\n// 处理课程变化\r\nconst handleCourseChange = () => {\r\n  queryParams.current = 1\r\n  fetchMaterials()\r\n}\r\n\r\n// 处理页码变化\r\nconst handleCurrentChange = (current) => {\r\n  queryParams.current = current\r\n  fetchMaterials()\r\n}\r\n\r\n// 处理每页条数变化\r\nconst handleSizeChange = (size) => {\r\n  queryParams.pageSize = size\r\n  queryParams.current = 1\r\n  fetchMaterials()\r\n}\r\n\r\n// 下载教学资源\r\nconst downloadMaterial = (material) => {\r\n  if (!material.id) {\r\n    ElMessage.warning('材料ID为空')\r\n    return\r\n  }\r\n  \r\n  try {\r\n    // 创建下载链接 - 使用完整的API路径\r\n    const downloadUrl = `/api/material/download/${material.id}`\r\n    \r\n    // 创建一个隐藏的a标签，用于下载\r\n    const link = document.createElement('a')\r\n    link.href = downloadUrl\r\n    link.setAttribute('download', '') // 强制使用下载属性\r\n    document.body.appendChild(link)\r\n    link.click()\r\n    \r\n    // 清理DOM\r\n    setTimeout(() => {\r\n      document.body.removeChild(link)\r\n    }, 100)\r\n    \r\n    // 记录下载次数\r\n    axios.post(`/api/material/download/${material.id}`)\r\n      .catch(error => console.error('更新下载次数失败:', error))\r\n    \r\n    ElMessage.success('开始下载文件')\r\n  } catch (error) {\r\n    console.error('下载文件失败:', error)\r\n    ElMessage.error('下载文件失败')\r\n  }\r\n}\r\n\r\n// 同步教学大纲或授课计划\r\nconst syncMaterials = async (materialTypeName) => {\r\n  if (!queryParams.courseId) {\r\n    ElMessage.warning('请先选择课程')\r\n    return\r\n  }\r\n  \r\n  try {\r\n    loading.value = true\r\n    \r\n    // 查找对应的材料类型ID\r\n    const materialTypeId = materialTypes.value.find(type => type.name === materialTypeName)?.id\r\n    if (!materialTypeId) {\r\n      ElMessage.warning(`未找到${materialTypeName}材料类型`)\r\n      return\r\n    }\r\n    \r\n    // 查询同一课程其他教师上传的教学大纲或授课计划\r\n    const params = {\r\n      courseId: queryParams.courseId,\r\n      materialTypeId,\r\n      excludeUserId: currentTeacherId.value\r\n    }\r\n    \r\n    const response = await axios.get('/api/material/course-shared', { params })\r\n    const materials = response.data.data || []\r\n    \r\n    if (!materials.length) {\r\n      ElMessage.warning(`当前课程没有其他教师上传的${materialTypeName}`)\r\n      return\r\n    }\r\n    \r\n    // 显示确认对话框\r\n    await ElMessageBox.confirm(\r\n      `确定要同步本课程的${materialTypeName}吗？共${materials.length}份资料将被下载。`,\r\n      '确认同步',\r\n      {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'info'\r\n      }\r\n    )\r\n    \r\n    // 批量下载确认\r\n    ElMessage.success(`正在同步${materials.length}份${materialTypeName}资料，请在弹出的窗口中查看`)\r\n    \r\n    // 延迟一点时间，避免浏览器阻止批量下载\r\n    for (let i = 0; i < materials.length; i++) {\r\n      setTimeout(() => {\r\n        // 使用下载API\r\n        const downloadUrl = `/api/material/download/${materials[i].id}`\r\n        window.open(downloadUrl, '_blank')\r\n        \r\n        // 记录下载\r\n        axios.post(`/api/material/download/${materials[i].id}`)\r\n          .catch(error => console.error('更新下载次数失败:', error))\r\n      }, i * 1000) // 每次下载间隔1秒\r\n    }\r\n    \r\n  } catch (error) {\r\n    if (error !== 'cancel') {\r\n      console.error(`同步${materialTypeName}失败:`, error)\r\n      ElMessage.error(`同步${materialTypeName}失败`)\r\n    }\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 页面加载时获取数据\r\nonMounted(() => {\r\n  fetchTeacherCourses()\r\n  fetchMaterialTypes()\r\n  generateAcademicYears()\r\n  fetchMaterials()\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.resource-sharing-container {\r\n  padding: 20px;\r\n  \r\n  h1 {\r\n    margin-bottom: 20px;\r\n    font-size: 24px;\r\n    font-weight: 500;\r\n    color: #303133;\r\n  }\r\n  \r\n  .filter-card {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .sync-card {\r\n    margin-bottom: 20px;\r\n    \r\n    .sync-actions {\r\n      display: flex;\r\n      gap: 15px;\r\n      margin-bottom: 15px;\r\n    }\r\n    \r\n    .sync-tip {\r\n      margin-top: 10px;\r\n    }\r\n  }\r\n  \r\n  .materials-card {\r\n    .card-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n    }\r\n    \r\n    .materials-tip {\r\n      padding: 30px 0;\r\n    }\r\n    \r\n    .pagination-container {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}