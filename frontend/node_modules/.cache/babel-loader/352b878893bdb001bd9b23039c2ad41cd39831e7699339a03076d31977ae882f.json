{"ast":null,"code":"import { ref, reactive, onMounted, computed } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport axios from 'axios';\nimport { useStore } from 'vuex';\nimport { useRoute } from 'vue-router';\nexport default {\n  name: 'MaterialUpload',\n  setup() {\n    const store = useStore();\n    const uploadFormRef = ref(null);\n    const route = useRoute();\n\n    // 当前用户信息\n    const currentUser = computed(() => store.state.user);\n\n    // 上传表单\n    const uploadForm = reactive({\n      courseId: '',\n      materialTypeId: '',\n      academicYear: '',\n      semester: 1,\n      taskId: null,\n      name: '',\n      description: '',\n      file: null\n    });\n\n    // 表单验证规则\n    const rules = {\n      courseId: [{\n        required: true,\n        message: '请选择课程',\n        trigger: 'change'\n      }],\n      materialTypeId: [{\n        required: true,\n        message: '请选择材料类型',\n        trigger: 'change'\n      }],\n      academicYear: [{\n        required: true,\n        message: '请选择学年',\n        trigger: 'change'\n      }],\n      semester: [{\n        required: true,\n        message: '请选择学期',\n        trigger: 'change'\n      }],\n      name: [{\n        required: true,\n        message: '请输入材料名称',\n        trigger: 'blur'\n      }],\n      description: [{\n        required: true,\n        message: '请输入材料描述',\n        trigger: 'blur'\n      }]\n    };\n\n    // 上传相关\n    const uploadUrl = '/api/material/upload';\n    const uploadHeaders = {\n      Authorization: `Bearer ${localStorage.getItem('token')}`\n    };\n    const fileList = ref([]);\n    const uploading = ref(false);\n\n    // 课程列表\n    const courses = ref([]);\n    const fetchCourses = async () => {\n      try {\n        // 首先尝试从Vuex获取用户ID，如果不存在则从localStorage获取\n        let teacherId = currentUser.value?.id;\n        if (!teacherId) {\n          const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n          teacherId = userInfo.id;\n        }\n        if (!teacherId) {\n          ElMessage.warning('无法获取用户信息，请重新登录');\n          return;\n        }\n        console.log('当前教师ID:', teacherId);\n        const response = await axios.get(`/api/course/teacher/${teacherId}`);\n        courses.value = response.data.data;\n      } catch (error) {\n        console.error('获取课程列表失败', error);\n        ElMessage.error('获取课程列表失败');\n      }\n    };\n\n    // 材料类型列表\n    const materialTypes = ref([]);\n    const fetchMaterialTypes = async () => {\n      try {\n        const response = await axios.get('/api/material-type/list');\n        materialTypes.value = response.data.data;\n      } catch (error) {\n        console.error('获取材料类型列表失败', error);\n        ElMessage.error('获取材料类型列表失败');\n      }\n    };\n\n    // 学年列表\n    const academicYears = ref([]);\n    const generateAcademicYears = () => {\n      const currentYear = new Date().getFullYear();\n      const years = [];\n      for (let i = 0; i < 5; i++) {\n        const year = currentYear - i;\n        years.push(`${year}-${year + 1}`);\n      }\n      academicYears.value = years;\n    };\n\n    // 教师任务列表\n    const teacherTasks = ref([]);\n    const fetchTeacherTasks = async () => {\n      try {\n        // 首先尝试从Vuex获取用户ID，如果不存在则从localStorage获取\n        let teacherId = currentUser.value?.id;\n        if (!teacherId) {\n          const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n          teacherId = userInfo.id;\n        }\n        if (!teacherId) {\n          console.warn('无法获取教师ID，未加载用户信息');\n          return;\n        }\n        console.log('获取教师任务列表，教师ID:', teacherId);\n        const response = await axios.get('/api/material-task/teacher/tasks', {\n          params: {\n            teacherId\n          }\n        });\n        if (response.data.code === 200) {\n          teacherTasks.value = response.data.data || [];\n          console.log('获取到教师任务列表:', teacherTasks.value.length);\n        } else {\n          console.error('获取教师任务列表失败:', response.data.message);\n          teacherTasks.value = [];\n        }\n      } catch (error) {\n        console.error('获取教师任务列表失败:', error);\n        teacherTasks.value = [];\n      }\n    };\n\n    // 上传文件相关方法\n    const handlePreview = (/* file */\n    ) => {\n      // console.log(file);\n    };\n    const handleRemove = (/* file, fileList */\n    ) => {\n      uploadForm.file = null;\n    };\n    const beforeUpload = file => {\n      // 简化文件类型判断和处理\n      let isValidType = false;\n      let simpleFileType = '';\n      if (file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n        isValidType = true;\n        simpleFileType = 'doc';\n      } else if (file.type === 'application/pdf') {\n        isValidType = true;\n        simpleFileType = 'pdf';\n      }\n      const isLt10M = file.size / 1024 / 1024 < 10;\n      if (!isValidType) {\n        ElMessage.error('上传文件只能是 doc/docx/pdf 格式!');\n        return false;\n      }\n      if (!isLt10M) {\n        ElMessage.error('上传文件大小不能超过 10MB!');\n        return false;\n      }\n      uploadForm.file = file;\n      uploadForm.fileType = simpleFileType;\n      return true;\n    };\n    const handleUploadSuccess = (response /* file, fileList */) => {\n      if (response.code === 200) {\n        uploadForm.filePath = response.data.filePath;\n        uploadForm.fileSize = response.data.fileSize;\n        // 使用简化后的文件类型\n        uploadForm.fileType = uploadForm.fileType || 'unknown';\n        ElMessage.success('文件上传成功');\n      } else {\n        ElMessage.error(response.message || '文件上传失败');\n      }\n    };\n    const handleUploadError = (error /* file, fileList */) => {\n      console.error('文件上传失败', error);\n      ElMessage.error('文件上传失败');\n    };\n\n    // 提交上传\n    const submitUpload = async () => {\n      if (!uploadForm.file) {\n        ElMessage.warning('请先上传文件');\n        return;\n      }\n      uploadFormRef.value.validate(async valid => {\n        if (valid) {\n          uploading.value = true;\n          try {\n            // 首先尝试从Vuex获取用户ID，如果不存在则从localStorage获取\n            let teacherId = currentUser.value?.id;\n            if (!teacherId) {\n              const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n              teacherId = userInfo.id;\n            }\n            if (!teacherId) {\n              ElMessage.warning('无法获取用户信息，请重新登录');\n              uploading.value = false;\n              return;\n            }\n\n            // 添加日志，检查taskId\n            console.log('提交材料时的表单数据:', JSON.stringify(uploadForm));\n            console.log('任务ID:', uploadForm.taskId, '类型:', typeof uploadForm.taskId);\n            const formData = new FormData();\n            formData.append('file', uploadForm.file);\n            formData.append('courseId', uploadForm.courseId);\n            formData.append('materialTypeId', uploadForm.materialTypeId);\n            formData.append('academicYear', uploadForm.academicYear);\n            formData.append('semester', uploadForm.semester);\n            formData.append('name', uploadForm.name);\n            formData.append('description', uploadForm.description);\n            formData.append('type', 0); // 0-课程材料\n            formData.append('teacherId', teacherId); // 添加教师ID\n\n            // 如果选择了任务，添加任务ID\n            if (uploadForm.taskId) {\n              console.log('添加任务ID到表单:', uploadForm.taskId);\n              formData.append('taskId', uploadForm.taskId);\n            } else {\n              console.log('未选择任务，不添加taskId');\n            }\n\n            // 上传材料\n            const response = await axios.post('/api/material/upload', formData, {\n              headers: {\n                'Content-Type': 'multipart/form-data'\n              }\n            });\n            if (response.data.code === 200) {\n              ElMessage.success('材料上传成功，已提交审核');\n              resetForm();\n              fetchMaterials();\n            } else {\n              ElMessage.error(response.data.message || '材料上传失败');\n            }\n          } catch (error) {\n            console.error('材料上传失败', error);\n            ElMessage.error('材料上传失败: ' + (error.response?.data?.message || error.message || '未知错误'));\n          } finally {\n            uploading.value = false;\n          }\n        }\n      });\n    };\n\n    // 重置表单\n    const resetForm = () => {\n      uploadFormRef.value.resetFields();\n      fileList.value = [];\n      uploadForm.file = null;\n    };\n\n    // 查询已上传材料\n    const queryParams = reactive({\n      current: 1,\n      size: 10,\n      teacherId: null,\n      courseId: null,\n      materialTypeId: null,\n      academicYear: null,\n      semester: null,\n      type: 0 // 0-课程材料\n    });\n    const materials = ref([]);\n    const total = ref(0);\n    const loading = ref(false);\n    const fetchMaterials = async () => {\n      loading.value = true;\n      try {\n        // 首先尝试从Vuex获取用户ID，如果不存在则从localStorage获取\n        let teacherId = currentUser.value?.id;\n        if (!teacherId) {\n          const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n          teacherId = userInfo.id;\n        }\n        if (!teacherId) {\n          ElMessage.warning('无法获取用户信息，请重新登录');\n          loading.value = false;\n          return;\n        }\n        queryParams.teacherId = teacherId;\n        const response = await axios.get('/api/material/teacher', {\n          params: queryParams\n        });\n        if (response.data && response.data.data) {\n          // 处理并格式化返回的数据\n          const records = response.data.data.records || [];\n          materials.value = records.map(record => {\n            // 确保所有必要字段都存在\n            return {\n              ...record,\n              // 如果缺少某些字段，使用默认值\n              material_type_name: record.material_type_name || '未知类型',\n              course_name: record.course_name || '未知课程',\n              academic_year: record.academic_year || '未知学年',\n              // 确保学期为数字类型\n              semester: record.semester ? Number(record.semester) : null\n            };\n          });\n          total.value = response.data.data.total || 0;\n\n          // 打印查询结果，检查字段\n          console.log('获取到的材料列表:', materials.value);\n          if (materials.value.length > 0) {\n            console.log('第一条材料数据样例:', materials.value[0]);\n            console.log('材料类型名称:', materials.value[0].material_type_name);\n            console.log('学年:', materials.value[0].academic_year);\n            console.log('学期:', materials.value[0].semester, '类型:', typeof materials.value[0].semester);\n          }\n        } else {\n          materials.value = [];\n          total.value = 0;\n        }\n      } catch (error) {\n        console.error('获取材料列表失败', error);\n        ElMessage.error('获取材料列表失败');\n        materials.value = [];\n        total.value = 0;\n      } finally {\n        loading.value = false;\n      }\n    };\n    const handleCurrentChange = current => {\n      queryParams.current = current;\n      fetchMaterials();\n    };\n    const handleCourseChange = (/* courseId */\n    ) => {\n      // 可以在这里根据课程ID获取相关信息\n    };\n\n    // 下载材料\n    const downloadMaterial = material => {\n      if (!material.id) {\n        ElMessage.warning('材料ID为空');\n        return;\n      }\n      try {\n        // 创建下载链接 - 使用API接口路径\n        const downloadUrl = `/api/material/download/${material.id}`;\n\n        // 创建一个隐藏的a标签，用于下载\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.target = '_blank';\n        link.setAttribute('download', ''); // 强制使用下载属性\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n\n        // 记录下载次数\n        axios.post(`/api/material/download/${material.id}`).catch(error => console.error('更新下载次数失败:', error));\n        ElMessage.success('开始下载文件');\n      } catch (error) {\n        console.error('下载文件失败:', error);\n        ElMessage.error('下载文件失败');\n      }\n    };\n\n    // 删除材料\n    const deleteMaterial = material => {\n      ElMessageBox.confirm('确定要删除该材料吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const response = await axios.delete(`/api/material/${material.id}`);\n          if (response.data.code === 200) {\n            ElMessage.success('删除成功');\n            fetchMaterials();\n          } else {\n            ElMessage.error(response.data.message || '删除失败');\n          }\n        } catch (error) {\n          console.error('删除失败', error);\n          ElMessage.error('删除失败');\n        }\n      }).catch(() => {});\n    };\n\n    // 提交审核\n    const submitToReview = async material => {\n      try {\n        // 首先尝试从Vuex获取用户ID，如果不存在则从localStorage获取\n        let teacherId = currentUser.value?.id;\n        if (!teacherId) {\n          const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n          teacherId = userInfo.id;\n        }\n        if (!teacherId) {\n          ElMessage.warning('无法获取用户信息，请重新登录');\n          return;\n        }\n        const response = await axios.post('/api/material-review/submit', {\n          materialId: material.id,\n          academicYear: material.academic_year,\n          semester: material.semester,\n          materialTypeId: material.material_type_id,\n          teacherId: teacherId,\n          courseId: material.course_id\n        });\n        if (response.data.code === 200) {\n          ElMessage.success('提交审核成功');\n          fetchMaterials();\n        } else {\n          ElMessage.error(response.data.message || '提交审核失败');\n        }\n      } catch (error) {\n        console.error('提交审核失败', error);\n        ElMessage.error('提交审核失败');\n      }\n    };\n\n    // 查看审核状态\n    const reviewDialogVisible = ref(false);\n    const reviewDetail = ref(null);\n    const reviewRecords = ref([]);\n    const viewReviewStatus = async material => {\n      try {\n        const detailResponse = await axios.get(`/api/material-review/detail/${material.review_id}`);\n        reviewDetail.value = detailResponse.data.data;\n\n        // 打印审核详情，检查字段\n        console.log('审核详情:', reviewDetail.value);\n        const recordsResponse = await axios.get(`/api/material-review/records/${material.review_id}`);\n        reviewRecords.value = recordsResponse.data.data;\n\n        // 确保审核详情包含所需字段\n        if (reviewDetail.value) {\n          if (!reviewDetail.value.material_type_name) {\n            console.warn('审核详情中缺少材料类型名称');\n          }\n          if (!reviewDetail.value.academic_year) {\n            console.warn('审核详情中缺少学年信息');\n          }\n        }\n        reviewDialogVisible.value = true;\n      } catch (error) {\n        console.error('获取审核详情失败', error);\n        ElMessage.error('获取审核详情失败');\n      }\n    };\n\n    // 工具函数\n    const getStatusText = status => {\n      switch (status) {\n        case 0:\n          return '待审核';\n        case 1:\n          return '课程负责人审核中';\n        case 2:\n          return '专业负责人审核中';\n        case 3:\n          return '副院长审核中';\n        case 4:\n          return '教务人员审核中';\n        case 5:\n          return '审核通过';\n        case 6:\n          return '审核不通过';\n        default:\n          return '未知状态';\n      }\n    };\n    const getStatusType = status => {\n      switch (status) {\n        case 0:\n          return 'info';\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n          return 'warning';\n        case 5:\n          return 'success';\n        case 6:\n          return 'danger';\n        default:\n          return 'info';\n      }\n    };\n    const getReviewerTitleText = title => {\n      switch (title) {\n        case 0:\n          return '普通教师';\n        case 1:\n          return '课程负责人';\n        case 2:\n          return '专业负责人';\n        case 3:\n          return '副院长';\n        case 4:\n          return '教务人员';\n        default:\n          return '未知职称';\n      }\n    };\n    onMounted(() => {\n      // 初始化获取数据\n      fetchCourses();\n      fetchMaterialTypes();\n      generateAcademicYears();\n      fetchTeacherTasks(); // 获取教师任务列表\n\n      // 获取URL中的查询参数\n      const {\n        taskId,\n        materialTypeId,\n        courseId,\n        academicYear,\n        semester\n      } = route.query;\n      if (taskId) {\n        uploadForm.taskId = Number(taskId);\n      }\n      if (materialTypeId) {\n        uploadForm.materialTypeId = Number(materialTypeId);\n      }\n      if (courseId) {\n        uploadForm.courseId = Number(courseId);\n      }\n      if (academicYear) {\n        uploadForm.academicYear = academicYear;\n      }\n      if (semester) {\n        uploadForm.semester = Number(semester);\n      }\n      fetchMaterials();\n    });\n    return {\n      uploadFormRef,\n      uploadForm,\n      rules,\n      uploadUrl,\n      uploadHeaders,\n      fileList,\n      uploading,\n      courses,\n      materialTypes,\n      academicYears,\n      handlePreview,\n      handleRemove,\n      beforeUpload,\n      handleUploadSuccess,\n      handleUploadError,\n      submitUpload,\n      resetForm,\n      queryParams,\n      materials,\n      total,\n      loading,\n      fetchMaterials,\n      handleCurrentChange,\n      handleCourseChange,\n      downloadMaterial,\n      deleteMaterial,\n      submitToReview,\n      reviewDialogVisible,\n      reviewDetail,\n      reviewRecords,\n      viewReviewStatus,\n      getStatusText,\n      getStatusType,\n      getReviewerTitleText,\n      teacherTasks\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","ElMessage","ElMessageBox","axios","useStore","useRoute","name","setup","store","uploadFormRef","route","currentUser","state","user","uploadForm","courseId","materialTypeId","academicYear","semester","taskId","description","file","rules","required","message","trigger","uploadUrl","uploadHeaders","Authorization","localStorage","getItem","fileList","uploading","courses","fetchCourses","teacherId","value","id","userInfo","JSON","parse","warning","console","log","response","get","data","error","materialTypes","fetchMaterialTypes","academicYears","generateAcademicYears","currentYear","Date","getFullYear","years","i","year","push","teacherTasks","fetchTeacherTasks","warn","params","code","length","handlePreview","handleRemove","beforeUpload","isValidType","simpleFileType","type","isLt10M","size","fileType","handleUploadSuccess","filePath","fileSize","success","handleUploadError","submitUpload","validate","valid","stringify","formData","FormData","append","post","headers","resetForm","fetchMaterials","resetFields","queryParams","current","materials","total","loading","records","map","record","material_type_name","course_name","academic_year","Number","handleCurrentChange","handleCourseChange","downloadMaterial","material","downloadUrl","link","document","createElement","href","target","setAttribute","body","appendChild","click","removeChild","catch","deleteMaterial","confirm","confirmButtonText","cancelButtonText","then","delete","submitToReview","materialId","material_type_id","course_id","reviewDialogVisible","reviewDetail","reviewRecords","viewReviewStatus","detailResponse","review_id","recordsResponse","getStatusText","status","getStatusType","getReviewerTitleText","title","query"],"sources":["C:\\Users\\18083\\Desktop\\CCIT\\TCRSystem\\TCRSystem\\frontend\\src\\views\\teacher\\MaterialUpload.vue"],"sourcesContent":["<template>\n  <div class=\"material-upload\">\n    <el-card class=\"box-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>教学材料上传</span>\n        </div>\n      </template>\n      \n      <el-form :model=\"uploadForm\" :rules=\"rules\" ref=\"uploadFormRef\" label-width=\"100px\">\n        <el-form-item label=\"课程\" prop=\"courseId\">\n          <el-select v-model=\"uploadForm.courseId\" placeholder=\"请选择课程\" @change=\"handleCourseChange\" style=\"width: 350px;\">\n            <el-option\n              v-for=\"course in courses\"\n              :key=\"course.id\"\n              :label=\"course.name\"\n              :value=\"course.id\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"材料类型\" prop=\"materialTypeId\">\n          <el-select v-model=\"uploadForm.materialTypeId\" placeholder=\"请选择材料类型\" style=\"width: 350px;\">\n            <el-option\n              v-for=\"type in materialTypes\"\n              :key=\"type.id\"\n              :label=\"type.name\"\n              :value=\"type.id\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"学年\" prop=\"academicYear\">\n          <el-select v-model=\"uploadForm.academicYear\" placeholder=\"请选择学年\" style=\"width: 350px;\">\n            <el-option\n              v-for=\"year in academicYears\"\n              :key=\"year\"\n              :label=\"year\"\n              :value=\"year\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"学期\" prop=\"semester\">\n          <el-radio-group v-model=\"uploadForm.semester\">\n            <el-radio :label=\"1\">第一学期</el-radio>\n            <el-radio :label=\"2\">第二学期</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        \n        <el-form-item label=\"任务标题\">\n          <el-select v-model=\"uploadForm.taskId\" placeholder=\"请选择任务标题（非必选）\" clearable style=\"width: 350px;\">\n            <el-option\n              v-for=\"task in teacherTasks\"\n              :key=\"task.id\"\n              :label=\"task.title\"\n              :value=\"task.id\"\n            ></el-option>\n          </el-select>\n          <div class=\"el-form-item__description\">\n            <small>关联到教学材料任务可以自动记录任务完成情况</small>\n          </div>\n        </el-form-item>\n        \n        <el-form-item label=\"材料名称\" prop=\"name\">\n          <el-input v-model=\"uploadForm.name\" placeholder=\"请输入材料名称\"></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"材料描述\" prop=\"description\">\n          <el-input v-model=\"uploadForm.description\" type=\"textarea\" :rows=\"3\" placeholder=\"请输入材料描述\"></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"上传文件\" prop=\"file\">\n          <el-upload\n            class=\"upload-demo\"\n            :action=\"uploadUrl\"\n            :headers=\"uploadHeaders\"\n            :on-preview=\"handlePreview\"\n            :on-remove=\"handleRemove\"\n            :on-success=\"handleUploadSuccess\"\n            :on-error=\"handleUploadError\"\n            :before-upload=\"beforeUpload\"\n            :limit=\"1\"\n            :file-list=\"fileList\"\n          >\n            <el-button type=\"primary\">点击上传</el-button>\n            <template #tip>\n              <div class=\"el-upload__tip\">\n                只能上传 doc/docx/pdf 文件，且不超过 10MB\n              </div>\n            </template>\n          </el-upload>\n        </el-form-item>\n        \n        <el-form-item>\n          <el-button type=\"primary\" @click=\"submitUpload\" :loading=\"uploading\">提交</el-button>\n          <el-button @click=\"resetForm\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n    \n    <el-card class=\"box-card\" style=\"margin-top: 20px;\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>已上传材料</span>\n          <div class=\"filter-container\">\n            <el-form :inline=\"true\" :model=\"queryParams\" class=\"demo-form-inline\">\n              <el-form-item label=\"课程\">\n                <el-select v-model=\"queryParams.courseId\" placeholder=\"请选择课程\" clearable style=\"width: 250px;\">\n                  <el-option\n                    v-for=\"course in courses\"\n                    :key=\"course.id\"\n                    :label=\"course.name\"\n                    :value=\"course.id\"\n                  ></el-option>\n                </el-select>\n              </el-form-item>\n              <el-form-item label=\"材料类型\">\n                <el-select v-model=\"queryParams.materialTypeId\" placeholder=\"请选择材料类型\" clearable style=\"width: 250px;\">\n                  <el-option\n                    v-for=\"type in materialTypes\"\n                    :key=\"type.id\"\n                    :label=\"type.name\"\n                    :value=\"type.id\"\n                  ></el-option>\n                </el-select>\n              </el-form-item>\n              <el-form-item label=\"学年\">\n                <el-select v-model=\"queryParams.academicYear\" placeholder=\"请选择学年\" clearable style=\"width: 250px;\">\n                  <el-option\n                    v-for=\"year in academicYears\"\n                    :key=\"year\"\n                    :label=\"year\"\n                    :value=\"year\"\n                  ></el-option>\n                </el-select>\n              </el-form-item>\n              <el-form-item label=\"学期\">\n                <el-select v-model=\"queryParams.semester\" placeholder=\"请选择学期\" clearable style=\"width: 250px;\">\n                  <el-option label=\"第一学期\" :value=\"1\"></el-option>\n                  <el-option label=\"第二学期\" :value=\"2\"></el-option>\n                </el-select>\n              </el-form-item>\n              <el-form-item>\n                <el-button type=\"primary\" @click=\"fetchMaterials\">查询</el-button>\n              </el-form-item>\n            </el-form>\n          </div>\n        </div>\n      </template>\n      \n      <el-table :data=\"materials\" style=\"width: 100%\" v-loading=\"loading\">\n        <el-table-column prop=\"name\" label=\"材料名称\" width=\"180\"></el-table-column>\n        <el-table-column prop=\"course_name\" label=\"所属课程\" width=\"150\"></el-table-column>\n        <el-table-column prop=\"material_type_name\" label=\"材料类型\" width=\"120\">\n          <template #default=\"scope\">\n            {{ scope.row.material_type_name || '未知类型' }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"academic_year\" label=\"学年\" width=\"100\">\n          <template #default=\"scope\">\n            {{ scope.row.academic_year || '未知学年' }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"semester\" label=\"学期\" width=\"100\">\n          <template #default=\"scope\">\n            {{ scope.row.semester === 1 ? '第一学期' : scope.row.semester === 2 ? '第二学期' : '未知学期' }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\n        <el-table-column prop=\"create_time\" label=\"上传时间\" width=\"180\"></el-table-column>\n        <el-table-column label=\"操作\" width=\"250\">\n          <template #default=\"scope\">\n            <el-button type=\"text\" size=\"small\" @click=\"downloadMaterial(scope.row)\">下载</el-button>\n            <el-button type=\"text\" size=\"small\" @click=\"submitToReview(scope.row)\" v-if=\"!scope.row.review_id\">提交审核</el-button>\n            <el-button type=\"text\" size=\"small\" @click=\"viewReviewStatus(scope.row)\" v-if=\"scope.row.review_id\">查看审核状态</el-button>\n            <el-button type=\"text\" size=\"small\" @click=\"deleteMaterial(scope.row)\" class=\"danger-button\">删除</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      \n      <div class=\"pagination-container\">\n        <el-pagination\n          background\n          layout=\"total, prev, pager, next\"\n          :total=\"total\"\n          :page-size=\"queryParams.size\"\n          :current-page=\"queryParams.current\"\n          @current-change=\"handleCurrentChange\"\n        ></el-pagination>\n      </div>\n    </el-card>\n    \n    <!-- 审核状态对话框 -->\n    <el-dialog title=\"审核状态\" v-model=\"reviewDialogVisible\" width=\"60%\">\n      <div v-if=\"reviewDetail\">\n        <el-descriptions :column=\"2\" border>\n          <el-descriptions-item label=\"材料名称\">{{ reviewDetail.material_name }}</el-descriptions-item>\n          <el-descriptions-item label=\"所属课程\">{{ reviewDetail.course_name || '未知课程' }}</el-descriptions-item>\n          <el-descriptions-item label=\"材料类型\">{{ reviewDetail.material_type_name || '未知类型' }}</el-descriptions-item>\n          <el-descriptions-item label=\"学年/学期\">{{ reviewDetail.academic_year || '未知学年' }} / {{ reviewDetail.semester === 1 ? '第一学期' : '第二学期' }}</el-descriptions-item>\n          <el-descriptions-item label=\"当前状态\">\n            <el-tag :type=\"getStatusType(reviewDetail.status)\">{{ getStatusText(reviewDetail.status) }}</el-tag>\n          </el-descriptions-item>\n          <el-descriptions-item label=\"当前审核人\">{{ reviewDetail.current_reviewer_name || '暂无审核人' }}</el-descriptions-item>\n        </el-descriptions>\n        \n        <div class=\"review-records\">\n          <h3>审核记录</h3>\n          <el-table :data=\"reviewRecords\" style=\"width: 100%\">\n            <el-table-column prop=\"reviewer_name\" label=\"审核人\" width=\"120\"></el-table-column>\n            <el-table-column prop=\"reviewer_title\" label=\"审核人职称\" width=\"120\">\n              <template #default=\"scope\">\n                {{ getReviewerTitleText(scope.row.reviewer_title) }}\n              </template>\n            </el-table-column>\n            <el-table-column prop=\"result\" label=\"审核结果\" width=\"100\">\n              <template #default=\"scope\">\n                <el-tag :type=\"scope.row.result === 1 ? 'success' : 'danger'\">\n                  {{ scope.row.result === 1 ? '通过' : '不通过' }}\n                </el-tag>\n              </template>\n            </el-table-column>\n            <el-table-column prop=\"comment\" label=\"审核意见\"></el-table-column>\n            <el-table-column prop=\"create_time\" label=\"审核时间\" width=\"180\"></el-table-column>\n          </el-table>\n        </div>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted, computed } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport axios from 'axios';\nimport { useStore } from 'vuex';\nimport { useRoute } from 'vue-router';\n\nexport default {\n  name: 'MaterialUpload',\n  setup() {\n    const store = useStore();\n    const uploadFormRef = ref(null);\n    const route = useRoute();\n    \n    // 当前用户信息\n    const currentUser = computed(() => store.state.user);\n    \n    // 上传表单\n    const uploadForm = reactive({\n      courseId: '',\n      materialTypeId: '',\n      academicYear: '',\n      semester: 1,\n      taskId: null,\n      name: '',\n      description: '',\n      file: null\n    });\n    \n    // 表单验证规则\n    const rules = {\n      courseId: [{ required: true, message: '请选择课程', trigger: 'change' }],\n      materialTypeId: [{ required: true, message: '请选择材料类型', trigger: 'change' }],\n      academicYear: [{ required: true, message: '请选择学年', trigger: 'change' }],\n      semester: [{ required: true, message: '请选择学期', trigger: 'change' }],\n      name: [{ required: true, message: '请输入材料名称', trigger: 'blur' }],\n      description: [{ required: true, message: '请输入材料描述', trigger: 'blur' }]\n    };\n    \n    // 上传相关\n    const uploadUrl = '/api/material/upload';\n    const uploadHeaders = {\n      Authorization: `Bearer ${localStorage.getItem('token')}`\n    };\n    const fileList = ref([]);\n    const uploading = ref(false);\n    \n    // 课程列表\n    const courses = ref([]);\n    const fetchCourses = async () => {\n      try {\n        // 首先尝试从Vuex获取用户ID，如果不存在则从localStorage获取\n        let teacherId = currentUser.value?.id;\n        if (!teacherId) {\n          const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n          teacherId = userInfo.id;\n        }\n        \n        if (!teacherId) {\n          ElMessage.warning('无法获取用户信息，请重新登录');\n          return;\n        }\n        \n        console.log('当前教师ID:', teacherId);\n        const response = await axios.get(`/api/course/teacher/${teacherId}`);\n        courses.value = response.data.data;\n      } catch (error) {\n        console.error('获取课程列表失败', error);\n        ElMessage.error('获取课程列表失败');\n      }\n    };\n    \n    // 材料类型列表\n    const materialTypes = ref([]);\n    const fetchMaterialTypes = async () => {\n      try {\n        const response = await axios.get('/api/material-type/list');\n        materialTypes.value = response.data.data;\n      } catch (error) {\n        console.error('获取材料类型列表失败', error);\n        ElMessage.error('获取材料类型列表失败');\n      }\n    };\n    \n    // 学年列表\n    const academicYears = ref([]);\n    const generateAcademicYears = () => {\n      const currentYear = new Date().getFullYear();\n      const years = [];\n      for (let i = 0; i < 5; i++) {\n        const year = currentYear - i;\n        years.push(`${year}-${year + 1}`);\n      }\n      academicYears.value = years;\n    };\n    \n    // 教师任务列表\n    const teacherTasks = ref([]);\n    const fetchTeacherTasks = async () => {\n      try {\n        // 首先尝试从Vuex获取用户ID，如果不存在则从localStorage获取\n        let teacherId = currentUser.value?.id;\n        if (!teacherId) {\n          const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n          teacherId = userInfo.id;\n        }\n        \n        if (!teacherId) {\n          console.warn('无法获取教师ID，未加载用户信息');\n          return;\n        }\n\n        console.log('获取教师任务列表，教师ID:', teacherId);\n        const response = await axios.get('/api/material-task/teacher/tasks', {\n          params: { teacherId }\n        });\n        \n        if (response.data.code === 200) {\n          teacherTasks.value = response.data.data || [];\n          console.log('获取到教师任务列表:', teacherTasks.value.length);\n        } else {\n          console.error('获取教师任务列表失败:', response.data.message);\n          teacherTasks.value = [];\n        }\n      } catch (error) {\n        console.error('获取教师任务列表失败:', error);\n        teacherTasks.value = [];\n      }\n    };\n    \n    // 上传文件相关方法\n    const handlePreview = (/* file */) => {\n      // console.log(file);\n    };\n    \n    const handleRemove = (/* file, fileList */) => {\n      uploadForm.file = null;\n    };\n    \n    const beforeUpload = (file) => {\n      // 简化文件类型判断和处理\n      let isValidType = false;\n      let simpleFileType = '';\n      \n      if (file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n        isValidType = true;\n        simpleFileType = 'doc';\n      } else if (file.type === 'application/pdf') {\n        isValidType = true;\n        simpleFileType = 'pdf';\n      }\n      \n      const isLt10M = file.size / 1024 / 1024 < 10;\n      \n      if (!isValidType) {\n        ElMessage.error('上传文件只能是 doc/docx/pdf 格式!');\n        return false;\n      }\n      \n      if (!isLt10M) {\n        ElMessage.error('上传文件大小不能超过 10MB!');\n        return false;\n      }\n      \n      uploadForm.file = file;\n      uploadForm.fileType = simpleFileType;\n      return true;\n    };\n    \n    const handleUploadSuccess = (response, /* file, fileList */) => {\n      if (response.code === 200) {\n        uploadForm.filePath = response.data.filePath;\n        uploadForm.fileSize = response.data.fileSize;\n        // 使用简化后的文件类型\n        uploadForm.fileType = uploadForm.fileType || 'unknown';\n        ElMessage.success('文件上传成功');\n      } else {\n        ElMessage.error(response.message || '文件上传失败');\n      }\n    };\n    \n    const handleUploadError = (error, /* file, fileList */) => {\n      console.error('文件上传失败', error);\n      ElMessage.error('文件上传失败');\n    };\n    \n    // 提交上传\n    const submitUpload = async () => {\n      if (!uploadForm.file) {\n        ElMessage.warning('请先上传文件');\n        return;\n      }\n      \n      uploadFormRef.value.validate(async (valid) => {\n        if (valid) {\n          uploading.value = true;\n          try {\n            // 首先尝试从Vuex获取用户ID，如果不存在则从localStorage获取\n            let teacherId = currentUser.value?.id;\n            if (!teacherId) {\n              const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n              teacherId = userInfo.id;\n            }\n            \n            if (!teacherId) {\n              ElMessage.warning('无法获取用户信息，请重新登录');\n              uploading.value = false;\n              return;\n            }\n            \n            // 添加日志，检查taskId\n            console.log('提交材料时的表单数据:', JSON.stringify(uploadForm));\n            console.log('任务ID:', uploadForm.taskId, '类型:', typeof uploadForm.taskId);\n            \n            const formData = new FormData();\n            formData.append('file', uploadForm.file);\n            formData.append('courseId', uploadForm.courseId);\n            formData.append('materialTypeId', uploadForm.materialTypeId);\n            formData.append('academicYear', uploadForm.academicYear);\n            formData.append('semester', uploadForm.semester);\n            formData.append('name', uploadForm.name);\n            formData.append('description', uploadForm.description);\n            formData.append('type', 0); // 0-课程材料\n            formData.append('teacherId', teacherId); // 添加教师ID\n            \n            // 如果选择了任务，添加任务ID\n            if (uploadForm.taskId) {\n              console.log('添加任务ID到表单:', uploadForm.taskId);\n              formData.append('taskId', uploadForm.taskId);\n            } else {\n              console.log('未选择任务，不添加taskId');\n            }\n            \n            // 上传材料\n            const response = await axios.post('/api/material/upload', formData, {\n              headers: {\n                'Content-Type': 'multipart/form-data'\n              }\n            });\n            \n            if (response.data.code === 200) {\n              ElMessage.success('材料上传成功，已提交审核');\n              resetForm();\n              fetchMaterials();\n            } else {\n              ElMessage.error(response.data.message || '材料上传失败');\n            }\n          } catch (error) {\n            console.error('材料上传失败', error);\n            ElMessage.error('材料上传失败: ' + (error.response?.data?.message || error.message || '未知错误'));\n          } finally {\n            uploading.value = false;\n          }\n        }\n      });\n    };\n    \n    // 重置表单\n    const resetForm = () => {\n      uploadFormRef.value.resetFields();\n      fileList.value = [];\n      uploadForm.file = null;\n    };\n    \n    // 查询已上传材料\n    const queryParams = reactive({\n      current: 1,\n      size: 10,\n      teacherId: null,\n      courseId: null,\n      materialTypeId: null,\n      academicYear: null,\n      semester: null,\n      type: 0 // 0-课程材料\n    });\n    const materials = ref([]);\n    const total = ref(0);\n    const loading = ref(false);\n    \n    const fetchMaterials = async () => {\n      loading.value = true;\n      try {\n        // 首先尝试从Vuex获取用户ID，如果不存在则从localStorage获取\n        let teacherId = currentUser.value?.id;\n        if (!teacherId) {\n          const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n          teacherId = userInfo.id;\n        }\n        \n        if (!teacherId) {\n          ElMessage.warning('无法获取用户信息，请重新登录');\n          loading.value = false;\n          return;\n        }\n        \n        queryParams.teacherId = teacherId;\n        const response = await axios.get('/api/material/teacher', {\n          params: queryParams\n        });\n        if (response.data && response.data.data) {\n          // 处理并格式化返回的数据\n          const records = response.data.data.records || [];\n          materials.value = records.map(record => {\n            // 确保所有必要字段都存在\n            return {\n              ...record,\n              // 如果缺少某些字段，使用默认值\n              material_type_name: record.material_type_name || '未知类型',\n              course_name: record.course_name || '未知课程',\n              academic_year: record.academic_year || '未知学年',\n              // 确保学期为数字类型\n              semester: record.semester ? Number(record.semester) : null\n            };\n          });\n          \n          total.value = response.data.data.total || 0;\n          \n          // 打印查询结果，检查字段\n          console.log('获取到的材料列表:', materials.value);\n          if (materials.value.length > 0) {\n            console.log('第一条材料数据样例:', materials.value[0]);\n            console.log('材料类型名称:', materials.value[0].material_type_name);\n            console.log('学年:', materials.value[0].academic_year);\n            console.log('学期:', materials.value[0].semester, '类型:', typeof materials.value[0].semester);\n          }\n        } else {\n          materials.value = [];\n          total.value = 0;\n        }\n      } catch (error) {\n        console.error('获取材料列表失败', error);\n        ElMessage.error('获取材料列表失败');\n        materials.value = [];\n        total.value = 0;\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    const handleCurrentChange = (current) => {\n      queryParams.current = current;\n      fetchMaterials();\n    };\n    \n    const handleCourseChange = (/* courseId */) => {\n      // 可以在这里根据课程ID获取相关信息\n    };\n    \n    // 下载材料\n    const downloadMaterial = (material) => {\n      if (!material.id) {\n        ElMessage.warning('材料ID为空');\n        return;\n      }\n      \n      try {\n        // 创建下载链接 - 使用API接口路径\n        const downloadUrl = `/api/material/download/${material.id}`;\n        \n        // 创建一个隐藏的a标签，用于下载\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.target = '_blank';\n        link.setAttribute('download', ''); // 强制使用下载属性\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        \n        // 记录下载次数\n        axios.post(`/api/material/download/${material.id}`)\n          .catch(error => console.error('更新下载次数失败:', error));\n        \n        ElMessage.success('开始下载文件');\n      } catch (error) {\n        console.error('下载文件失败:', error);\n        ElMessage.error('下载文件失败');\n      }\n    };\n    \n    // 删除材料\n    const deleteMaterial = (material) => {\n      ElMessageBox.confirm('确定要删除该材料吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const response = await axios.delete(`/api/material/${material.id}`);\n          if (response.data.code === 200) {\n            ElMessage.success('删除成功');\n            fetchMaterials();\n          } else {\n            ElMessage.error(response.data.message || '删除失败');\n          }\n        } catch (error) {\n          console.error('删除失败', error);\n          ElMessage.error('删除失败');\n        }\n      }).catch(() => {});\n    };\n    \n    // 提交审核\n    const submitToReview = async (material) => {\n      try {\n        // 首先尝试从Vuex获取用户ID，如果不存在则从localStorage获取\n        let teacherId = currentUser.value?.id;\n        if (!teacherId) {\n          const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n          teacherId = userInfo.id;\n        }\n        \n        if (!teacherId) {\n          ElMessage.warning('无法获取用户信息，请重新登录');\n          return;\n        }\n        \n        const response = await axios.post('/api/material-review/submit', {\n          materialId: material.id,\n          academicYear: material.academic_year,\n          semester: material.semester,\n          materialTypeId: material.material_type_id,\n          teacherId: teacherId,\n          courseId: material.course_id\n        });\n        \n        if (response.data.code === 200) {\n          ElMessage.success('提交审核成功');\n          fetchMaterials();\n        } else {\n          ElMessage.error(response.data.message || '提交审核失败');\n        }\n      } catch (error) {\n        console.error('提交审核失败', error);\n        ElMessage.error('提交审核失败');\n      }\n    };\n    \n    // 查看审核状态\n    const reviewDialogVisible = ref(false);\n    const reviewDetail = ref(null);\n    const reviewRecords = ref([]);\n    \n    const viewReviewStatus = async (material) => {\n      try {\n        const detailResponse = await axios.get(`/api/material-review/detail/${material.review_id}`);\n        reviewDetail.value = detailResponse.data.data;\n        \n        // 打印审核详情，检查字段\n        console.log('审核详情:', reviewDetail.value);\n        \n        const recordsResponse = await axios.get(`/api/material-review/records/${material.review_id}`);\n        reviewRecords.value = recordsResponse.data.data;\n        \n        // 确保审核详情包含所需字段\n        if (reviewDetail.value) {\n          if (!reviewDetail.value.material_type_name) {\n            console.warn('审核详情中缺少材料类型名称');\n          }\n          if (!reviewDetail.value.academic_year) {\n            console.warn('审核详情中缺少学年信息');\n          }\n        }\n        \n        reviewDialogVisible.value = true;\n      } catch (error) {\n        console.error('获取审核详情失败', error);\n        ElMessage.error('获取审核详情失败');\n      }\n    };\n    \n    // 工具函数\n    const getStatusText = (status) => {\n      switch (status) {\n        case 0: return '待审核';\n        case 1: return '课程负责人审核中';\n        case 2: return '专业负责人审核中';\n        case 3: return '副院长审核中';\n        case 4: return '教务人员审核中';\n        case 5: return '审核通过';\n        case 6: return '审核不通过';\n        default: return '未知状态';\n      }\n    };\n    \n    const getStatusType = (status) => {\n      switch (status) {\n        case 0: return 'info';\n        case 1: case 2: case 3: case 4: return 'warning';\n        case 5: return 'success';\n        case 6: return 'danger';\n        default: return 'info';\n      }\n    };\n    \n    const getReviewerTitleText = (title) => {\n      switch (title) {\n        case 0: return '普通教师';\n        case 1: return '课程负责人';\n        case 2: return '专业负责人';\n        case 3: return '副院长';\n        case 4: return '教务人员';\n        default: return '未知职称';\n      }\n    };\n    \n    onMounted(() => {\n      // 初始化获取数据\n      fetchCourses();\n      fetchMaterialTypes();\n      generateAcademicYears();\n      fetchTeacherTasks(); // 获取教师任务列表\n      \n      // 获取URL中的查询参数\n      const { taskId, materialTypeId, courseId, academicYear, semester } = route.query;\n      \n      if (taskId) {\n        uploadForm.taskId = Number(taskId);\n      }\n      if (materialTypeId) {\n        uploadForm.materialTypeId = Number(materialTypeId);\n      }\n      if (courseId) {\n        uploadForm.courseId = Number(courseId);\n      }\n      if (academicYear) {\n        uploadForm.academicYear = academicYear;\n      }\n      if (semester) {\n        uploadForm.semester = Number(semester);\n      }\n      \n      fetchMaterials();\n    });\n    \n    return {\n      uploadFormRef,\n      uploadForm,\n      rules,\n      uploadUrl,\n      uploadHeaders,\n      fileList,\n      uploading,\n      courses,\n      materialTypes,\n      academicYears,\n      handlePreview,\n      handleRemove,\n      beforeUpload,\n      handleUploadSuccess,\n      handleUploadError,\n      submitUpload,\n      resetForm,\n      queryParams,\n      materials,\n      total,\n      loading,\n      fetchMaterials,\n      handleCurrentChange,\n      handleCourseChange,\n      downloadMaterial,\n      deleteMaterial,\n      submitToReview,\n      reviewDialogVisible,\n      reviewDetail,\n      reviewRecords,\n      viewReviewStatus,\n      getStatusText,\n      getStatusType,\n      getReviewerTitleText,\n      teacherTasks\n    };\n  }\n};\n</script>\n\n<style scoped>\n.material-upload {\n  padding: 20px;\n}\n\n.filter-container {\n  margin-top: 10px;\n}\n\n.pagination-container {\n  margin-top: 20px;\n  text-align: right;\n}\n\n.review-records {\n  margin-top: 20px;\n}\n\n.danger-button {\n  color: #F56C6C;\n}\n\n.el-form-item__description {\n  padding-top: 5px;\n  color: #909399;\n  font-size: 12px;\n  line-height: 1.2;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}