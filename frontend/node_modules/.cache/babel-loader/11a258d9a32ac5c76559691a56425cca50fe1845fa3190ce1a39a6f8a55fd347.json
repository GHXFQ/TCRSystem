{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport router from '@/router';\n\n// 创建axios实例\nconst request = axios.create({\n  baseURL: '/api',\n  timeout: 10000\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  // 从localStorage获取token\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  const res = response.data;\n  if (res.code !== 200) {\n    ElMessage.error(res.message || '请求失败');\n    return Promise.reject(res.message || '请求失败');\n  }\n  return res;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    // token过期或未登录\n    localStorage.removeItem('token');\n    router.push('/login');\n  }\n  ElMessage.error(error.message || '请求失败');\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","ElMessage","router","request","create","baseURL","timeout","interceptors","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","res","data","code","message","status","removeItem","push"],"sources":["C:/Users/18083/Desktop/CCIT/TCRSystem/TCRSystem/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport router from '@/router'\r\n\r\n// 创建axios实例\r\nconst request = axios.create({\r\n  baseURL: '/api',\r\n  timeout: 10000\r\n})\r\n\r\n// 请求拦截器\r\nrequest.interceptors.request.use(\r\n  config => {\r\n    // 从localStorage获取token\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n      config.headers['Authorization'] = token\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nrequest.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n    if (res.code !== 200) {\r\n      ElMessage.error(res.message || '请求失败')\r\n      return Promise.reject(res.message || '请求失败')\r\n    }\r\n    return res\r\n  },\r\n  error => {\r\n    if (error.response && error.response.status === 401) {\r\n      // token过期或未登录\r\n      localStorage.removeItem('token')\r\n      router.push('/login')\r\n    }\r\n    ElMessage.error(error.message || '请求失败')\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default request "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC3BC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAGH,KAAK;EACzC;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,OAAO,CAACI,YAAY,CAACU,QAAQ,CAACT,GAAG,CAC/BS,QAAQ,IAAI;EACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACpBnB,SAAS,CAACa,KAAK,CAACI,GAAG,CAACG,OAAO,IAAI,MAAM,CAAC;IACtC,OAAON,OAAO,CAACC,MAAM,CAACE,GAAG,CAACG,OAAO,IAAI,MAAM,CAAC;EAC9C;EACA,OAAOH,GAAG;AACZ,CAAC,EACDJ,KAAK,IAAI;EACP,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;IACnD;IACAX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChCrB,MAAM,CAACsB,IAAI,CAAC,QAAQ,CAAC;EACvB;EACAvB,SAAS,CAACa,KAAK,CAACA,KAAK,CAACO,OAAO,IAAI,MAAM,CAAC;EACxC,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}