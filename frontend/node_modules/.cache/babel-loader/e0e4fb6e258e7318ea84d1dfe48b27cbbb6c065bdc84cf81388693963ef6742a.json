{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport axios from 'axios';\nimport dayjs from 'dayjs';\n\n// 查询参数\n\nexport default {\n  __name: 'CourseManagement',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const queryParams = reactive({\n      pageNum: 1,\n      pageSize: 10,\n      name: '',\n      status: ''\n    });\n\n    // 课程列表\n    const courseList = ref([]);\n    const allCourseOptions = ref([]); // 用于课程名称筛选的选项列表\n    const total = ref(0);\n    const loading = ref(false);\n\n    // 对话框相关变量\n    const dialogVisible = ref(false);\n    const dialogType = ref('add'); // 'add' 或 'edit'\n    const courseFormRef = ref(null);\n    const courseForm = reactive({\n      id: null,\n      name: '',\n      description: '',\n      classTime: '',\n      classLocation: '',\n      endTime: '',\n      endForm: 0,\n      endLocation: '',\n      status: 1\n    });\n\n    // 表单验证规则\n    const rules = {\n      name: [{\n        required: true,\n        message: '请输入课程名称',\n        trigger: 'blur'\n      }],\n      description: [{\n        required: true,\n        message: '请输入课程描述',\n        trigger: 'blur'\n      }],\n      classTime: [{\n        required: true,\n        message: '请输入上课时间',\n        trigger: 'blur'\n      }],\n      classLocation: [{\n        required: true,\n        message: '请输入上课地点',\n        trigger: 'blur'\n      }],\n      endTime: [{\n        required: true,\n        message: '请选择结课时间',\n        trigger: 'change'\n      }],\n      endForm: [{\n        required: true,\n        message: '请选择结课形式',\n        trigger: 'change'\n      }],\n      status: [{\n        required: true,\n        message: '请选择课程状态',\n        trigger: 'change'\n      }]\n    };\n\n    // 获取课程列表\n    const fetchCourses = async () => {\n      loading.value = true;\n      try {\n        // 获取当前教师ID\n        const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n        const teacherId = userInfo.id;\n        if (!teacherId) {\n          ElMessage.warning('获取用户信息失败，请重新登录');\n          return;\n        }\n\n        // 创建查询参数对象\n        const params = {\n          pageNum: queryParams.pageNum,\n          pageSize: queryParams.pageSize,\n          name: queryParams.name,\n          status: queryParams.status !== '' ? Number(queryParams.status) : null\n        };\n        console.log('查询参数:', params);\n\n        // 使用新的分页API\n        const response = await axios.get(`/api/course/teacher/${teacherId}/page`, {\n          params: params\n        });\n        if (response.data.code === 200) {\n          // 分页数据结构处理\n          const pageData = response.data.data;\n          courseList.value = pageData.records || [];\n          total.value = pageData.total || 0;\n\n          // 如果是第一次加载或全部课程列表为空，获取所有课程名称用于筛选\n          if (allCourseOptions.value.length === 0) {\n            fetchAllCourseOptions(teacherId);\n          }\n        } else {\n          ElMessage.error(response.data.message || '获取课程列表失败');\n        }\n      } catch (error) {\n        console.error('获取课程列表失败:', error);\n        ElMessage.error('获取课程列表失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 获取所有课程选项用于筛选\n    const fetchAllCourseOptions = async teacherId => {\n      try {\n        // 使用原始API获取所有教师课程，不带筛选条件\n        const response = await axios.get(`/api/course/teacher/${teacherId}`);\n        if (response.data.code === 200) {\n          const courses = response.data.data || [];\n          // 提取所有不重复的课程名称\n          allCourseOptions.value = Array.from(new Set(courses.map(course => course.name))).map(name => ({\n            name\n          }));\n          console.log('课程筛选选项:', allCourseOptions.value);\n        }\n      } catch (error) {\n        console.error('获取课程选项失败:', error);\n      }\n    };\n\n    // 重置查询条件\n    const resetQuery = () => {\n      queryParams.name = '';\n      queryParams.status = '';\n      fetchCourses();\n    };\n\n    // 处理分页大小变化\n    const handleSizeChange = val => {\n      queryParams.pageSize = val;\n      fetchCourses();\n    };\n\n    // 处理页码变化\n    const handleCurrentChange = val => {\n      queryParams.pageNum = val;\n      fetchCourses();\n    };\n\n    // 编辑课程\n    const handleEdit = row => {\n      resetCourseForm();\n      dialogType.value = 'edit';\n      Object.assign(courseForm, row);\n      dialogVisible.value = true;\n    };\n\n    // 删除课程\n    const handleDelete = row => {\n      ElMessageBox.confirm('确定要删除该课程吗？', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const response = await axios.delete(`/api/course/${row.id}`);\n          if (response.data.code === 200) {\n            ElMessage.success('删除成功');\n            fetchCourses();\n          } else {\n            ElMessage.error(response.data.message || '删除失败');\n          }\n        } catch (error) {\n          console.error('删除失败:', error);\n          ElMessage.error('删除失败');\n        }\n      }).catch(() => {});\n    };\n\n    // 重置课程表单\n    const resetCourseForm = () => {\n      courseForm.id = null;\n      courseForm.name = '';\n      courseForm.description = '';\n      courseForm.classTime = '';\n      courseForm.classLocation = '';\n      courseForm.endTime = '';\n      courseForm.endForm = 0;\n      courseForm.endLocation = '';\n      courseForm.status = 1;\n      if (courseFormRef.value) {\n        courseFormRef.value.resetFields();\n      }\n    };\n\n    // 提交表单\n    const submitForm = () => {\n      courseFormRef.value.validate(async valid => {\n        if (!valid) return;\n        try {\n          const url = dialogType.value === 'add' ? '/api/course' : '/api/course';\n          const method = dialogType.value === 'add' ? 'post' : 'put';\n          const response = await axios[method](url, courseForm);\n          if (response.data.code === 200) {\n            ElMessage.success(dialogType.value === 'add' ? '添加成功' : '修改成功');\n            dialogVisible.value = false;\n            fetchCourses();\n          } else {\n            ElMessage.error(response.data.message || (dialogType.value === 'add' ? '添加失败' : '修改失败'));\n          }\n        } catch (error) {\n          console.error(dialogType.value === 'add' ? '添加失败:' : '修改失败:', error);\n          ElMessage.error(dialogType.value === 'add' ? '添加失败' : '修改失败');\n        }\n      });\n    };\n\n    // 格式化结课时间\n    const formatEndTime = endTime => {\n      if (!endTime) return '未设置';\n      return dayjs(endTime).format('YYYY-MM-DD HH:mm');\n    };\n\n    // 获取结课形式标签\n    const getEndFormLabel = endForm => {\n      switch (endForm) {\n        case 0:\n          return '考试';\n        case 1:\n          return '大作业';\n        default:\n          return '未设置';\n      }\n    };\n\n    // 获取课程状态标签类型\n    const getStatusTag = status => {\n      switch (status) {\n        case 0:\n          return 'danger';\n        case 1:\n          return 'success';\n        case 2:\n          return 'info';\n        default:\n          return '';\n      }\n    };\n\n    // 获取课程状态标签文本\n    const getStatusLabel = status => {\n      switch (status) {\n        case 0:\n          return '未开始';\n        case 1:\n          return '进行中';\n        case 2:\n          return '已结束';\n        default:\n          return '未知';\n      }\n    };\n\n    // 页面加载时获取数据\n    onMounted(() => {\n      fetchCourses();\n    });\n    const __returned__ = {\n      queryParams,\n      courseList,\n      allCourseOptions,\n      total,\n      loading,\n      dialogVisible,\n      dialogType,\n      courseFormRef,\n      courseForm,\n      rules,\n      fetchCourses,\n      fetchAllCourseOptions,\n      resetQuery,\n      handleSizeChange,\n      handleCurrentChange,\n      handleEdit,\n      handleDelete,\n      resetCourseForm,\n      submitForm,\n      formatEndTime,\n      getEndFormLabel,\n      getStatusTag,\n      getStatusLabel,\n      ref,\n      reactive,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get axios() {\n        return axios;\n      },\n      get dayjs() {\n        return dayjs;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","ElMessage","ElMessageBox","axios","dayjs","queryParams","pageNum","pageSize","name","status","courseList","allCourseOptions","total","loading","dialogVisible","dialogType","courseFormRef","courseForm","id","description","classTime","classLocation","endTime","endForm","endLocation","rules","required","message","trigger","fetchCourses","value","userInfo","JSON","parse","localStorage","getItem","teacherId","warning","params","Number","console","log","response","get","data","code","pageData","records","length","fetchAllCourseOptions","error","courses","Array","from","Set","map","course","resetQuery","handleSizeChange","val","handleCurrentChange","handleEdit","row","resetCourseForm","Object","assign","handleDelete","confirm","confirmButtonText","cancelButtonText","type","then","delete","success","catch","resetFields","submitForm","validate","valid","url","method","formatEndTime","format","getEndFormLabel","getStatusTag","getStatusLabel"],"sources":["C:/Users/18083/Desktop/CCIT/TCRSystem/TCRSystem/frontend/src/views/teacher/CourseManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"course-management\">\r\n    <h1>课程管理</h1>\r\n    \r\n    <el-card class=\"filter-card\">\r\n      <div class=\"filter-container\">\r\n        <el-form :inline=\"true\" :model=\"queryParams\" class=\"demo-form-inline\">\r\n          <el-form-item label=\"课程名称\">\r\n            <el-select \r\n              v-model=\"queryParams.name\" \r\n              placeholder=\"选择课程\" \r\n              clearable \r\n              filterable\r\n              style=\"width: 220px;\"\r\n            >\r\n              <el-option\r\n                v-for=\"course in allCourseOptions\"\r\n                :key=\"course.name\"\r\n                :label=\"course.name\"\r\n                :value=\"course.name\"\r\n              />\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item label=\"状态\">\r\n            <el-select v-model=\"queryParams.status\" placeholder=\"选择状态\" clearable style=\"width: 150px;\">\r\n              <el-option label=\"未开始\" :value=\"0\" />\r\n              <el-option label=\"进行中\" :value=\"1\" />\r\n              <el-option label=\"已结束\" :value=\"2\" />\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button type=\"primary\" @click=\"fetchCourses\">查询</el-button>\r\n            <el-button @click=\"resetQuery\">重置</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </div>\r\n    </el-card>\r\n    \r\n    <el-card class=\"course-list-card\">\r\n      <el-table :data=\"courseList\" v-loading=\"loading\" style=\"width: 100%\">\r\n        <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\r\n        <el-table-column prop=\"description\" label=\"课程描述\" show-overflow-tooltip />\r\n        <el-table-column prop=\"classTime\" label=\"上课时间\" width=\"150\" />\r\n        <el-table-column prop=\"classLocation\" label=\"上课地点\" width=\"150\" />\r\n        <el-table-column label=\"结课时间\" width=\"170\">\r\n          <template #default=\"scope\">\r\n            {{ formatEndTime(scope.row.endTime) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"结课形式\" width=\"100\">\r\n          <template #default=\"scope\">\r\n            {{ getEndFormLabel(scope.row.endForm) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"endLocation\" label=\"结课地点\" width=\"150\" />\r\n        <el-table-column label=\"状态\" width=\"100\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"getStatusTag(scope.row.status)\">\r\n              {{ getStatusLabel(scope.row.status) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"200\" fixed=\"right\">\r\n          <template #default=\"scope\">\r\n            <el-button type=\"primary\" size=\"small\" @click=\"handleEdit(scope.row)\">编辑</el-button>\r\n            <el-button type=\"danger\" size=\"small\" @click=\"handleDelete(scope.row)\">删除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      \r\n      <div class=\"pagination-container\">\r\n        <el-pagination\r\n          :current-page=\"queryParams.pageNum\"\r\n          :page-size=\"queryParams.pageSize\"\r\n          :page-sizes=\"[10, 20, 50, 100]\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          :total=\"total\"\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n        />\r\n      </div>\r\n    </el-card>\r\n    \r\n    <!-- 添加/编辑课程对话框 -->\r\n    <el-dialog\r\n      v-model=\"dialogVisible\"\r\n      :title=\"dialogType === 'add' ? '添加课程' : '编辑课程'\"\r\n      width=\"600px\"\r\n      append-to-body\r\n    >\r\n      <el-form\r\n        ref=\"courseFormRef\"\r\n        :model=\"courseForm\"\r\n        :rules=\"rules\"\r\n        label-width=\"120px\"\r\n      >\r\n        <el-form-item label=\"课程名称\" prop=\"name\">\r\n          <el-input v-model=\"courseForm.name\" placeholder=\"请输入课程名称\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"课程描述\" prop=\"description\">\r\n          <el-input\r\n            v-model=\"courseForm.description\"\r\n            type=\"textarea\"\r\n            :rows=\"3\"\r\n            placeholder=\"请输入课程描述\"\r\n          />\r\n        </el-form-item>\r\n        <el-form-item label=\"上课时间\" prop=\"classTime\">\r\n          <el-input v-model=\"courseForm.classTime\" placeholder=\"例如：周一 8:00-9:40\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"上课地点\" prop=\"classLocation\">\r\n          <el-input v-model=\"courseForm.classLocation\" placeholder=\"例如：教学楼A-101\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"结课时间\" prop=\"endTime\">\r\n          <el-date-picker\r\n            v-model=\"courseForm.endTime\"\r\n            type=\"datetime\"\r\n            placeholder=\"选择结课时间\"\r\n            format=\"YYYY-MM-DD HH:mm\"\r\n            value-format=\"YYYY-MM-DD HH:mm:ss\"\r\n            style=\"width: 100%\"\r\n          />\r\n        </el-form-item>\r\n        <el-form-item label=\"结课形式\" prop=\"endForm\">\r\n          <el-radio-group v-model=\"courseForm.endForm\">\r\n            <el-radio :label=\"0\">考试</el-radio>\r\n            <el-radio :label=\"1\">大作业</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        <el-form-item label=\"结课地点\" prop=\"endLocation\" v-if=\"courseForm.endForm === 0\">\r\n          <el-input v-model=\"courseForm.endLocation\" placeholder=\"例如：教学楼C-201\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"课程状态\" prop=\"status\">\r\n          <el-select v-model=\"courseForm.status\" placeholder=\"请选择课程状态\">\r\n            <el-option label=\"未开始\" :value=\"0\" />\r\n            <el-option label=\"进行中\" :value=\"1\" />\r\n            <el-option label=\"已结束\" :value=\"2\" />\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <div class=\"dialog-footer\">\r\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"submitForm\">确认</el-button>\r\n        </div>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted } from 'vue'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\nimport axios from 'axios'\r\nimport dayjs from 'dayjs'\r\n\r\n// 查询参数\r\nconst queryParams = reactive({\r\n  pageNum: 1,\r\n  pageSize: 10,\r\n  name: '',\r\n  status: ''\r\n})\r\n\r\n// 课程列表\r\nconst courseList = ref([])\r\nconst allCourseOptions = ref([]) // 用于课程名称筛选的选项列表\r\nconst total = ref(0)\r\nconst loading = ref(false)\r\n\r\n// 对话框相关变量\r\nconst dialogVisible = ref(false)\r\nconst dialogType = ref('add') // 'add' 或 'edit'\r\nconst courseFormRef = ref(null)\r\nconst courseForm = reactive({\r\n  id: null,\r\n  name: '',\r\n  description: '',\r\n  classTime: '',\r\n  classLocation: '',\r\n  endTime: '',\r\n  endForm: 0,\r\n  endLocation: '',\r\n  status: 1\r\n})\r\n\r\n// 表单验证规则\r\nconst rules = {\r\n  name: [{ required: true, message: '请输入课程名称', trigger: 'blur' }],\r\n  description: [{ required: true, message: '请输入课程描述', trigger: 'blur' }],\r\n  classTime: [{ required: true, message: '请输入上课时间', trigger: 'blur' }],\r\n  classLocation: [{ required: true, message: '请输入上课地点', trigger: 'blur' }],\r\n  endTime: [{ required: true, message: '请选择结课时间', trigger: 'change' }],\r\n  endForm: [{ required: true, message: '请选择结课形式', trigger: 'change' }],\r\n  status: [{ required: true, message: '请选择课程状态', trigger: 'change' }]\r\n}\r\n\r\n// 获取课程列表\r\nconst fetchCourses = async () => {\r\n  loading.value = true\r\n  try {\r\n    // 获取当前教师ID\r\n    const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}')\r\n    const teacherId = userInfo.id\r\n    \r\n    if (!teacherId) {\r\n      ElMessage.warning('获取用户信息失败，请重新登录')\r\n      return\r\n    }\r\n    \r\n    // 创建查询参数对象\r\n    const params = { \r\n      pageNum: queryParams.pageNum,\r\n      pageSize: queryParams.pageSize,\r\n      name: queryParams.name,\r\n      status: queryParams.status !== '' ? Number(queryParams.status) : null\r\n    }\r\n    \r\n    console.log('查询参数:', params)\r\n    \r\n    // 使用新的分页API\r\n    const response = await axios.get(`/api/course/teacher/${teacherId}/page`, {\r\n      params: params\r\n    })\r\n    \r\n    if (response.data.code === 200) {\r\n      // 分页数据结构处理\r\n      const pageData = response.data.data\r\n      courseList.value = pageData.records || []\r\n      total.value = pageData.total || 0\r\n      \r\n      // 如果是第一次加载或全部课程列表为空，获取所有课程名称用于筛选\r\n      if (allCourseOptions.value.length === 0) {\r\n        fetchAllCourseOptions(teacherId)\r\n      }\r\n    } else {\r\n      ElMessage.error(response.data.message || '获取课程列表失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('获取课程列表失败:', error)\r\n    ElMessage.error('获取课程列表失败')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 获取所有课程选项用于筛选\r\nconst fetchAllCourseOptions = async (teacherId) => {\r\n  try {\r\n    // 使用原始API获取所有教师课程，不带筛选条件\r\n    const response = await axios.get(`/api/course/teacher/${teacherId}`)\r\n    \r\n    if (response.data.code === 200) {\r\n      const courses = response.data.data || []\r\n      // 提取所有不重复的课程名称\r\n      allCourseOptions.value = Array.from(\r\n        new Set(courses.map(course => course.name))\r\n      ).map(name => ({ name }))\r\n      \r\n      console.log('课程筛选选项:', allCourseOptions.value)\r\n    }\r\n  } catch (error) {\r\n    console.error('获取课程选项失败:', error)\r\n  }\r\n}\r\n\r\n// 重置查询条件\r\nconst resetQuery = () => {\r\n  queryParams.name = ''\r\n  queryParams.status = ''\r\n  fetchCourses()\r\n}\r\n\r\n// 处理分页大小变化\r\nconst handleSizeChange = (val) => {\r\n  queryParams.pageSize = val\r\n  fetchCourses()\r\n}\r\n\r\n// 处理页码变化\r\nconst handleCurrentChange = (val) => {\r\n  queryParams.pageNum = val\r\n  fetchCourses()\r\n}\r\n\r\n// 编辑课程\r\nconst handleEdit = (row) => {\r\n  resetCourseForm()\r\n  dialogType.value = 'edit'\r\n  Object.assign(courseForm, row)\r\n  dialogVisible.value = true\r\n}\r\n\r\n// 删除课程\r\nconst handleDelete = (row) => {\r\n  ElMessageBox.confirm('确定要删除该课程吗？', '警告', {\r\n    confirmButtonText: '确定',\r\n    cancelButtonText: '取消',\r\n    type: 'warning'\r\n  }).then(async () => {\r\n    try {\r\n      const response = await axios.delete(`/api/course/${row.id}`)\r\n      if (response.data.code === 200) {\r\n        ElMessage.success('删除成功')\r\n        fetchCourses()\r\n      } else {\r\n        ElMessage.error(response.data.message || '删除失败')\r\n      }\r\n    } catch (error) {\r\n      console.error('删除失败:', error)\r\n      ElMessage.error('删除失败')\r\n    }\r\n  }).catch(() => {})\r\n}\r\n\r\n// 重置课程表单\r\nconst resetCourseForm = () => {\r\n  courseForm.id = null\r\n  courseForm.name = ''\r\n  courseForm.description = ''\r\n  courseForm.classTime = ''\r\n  courseForm.classLocation = ''\r\n  courseForm.endTime = ''\r\n  courseForm.endForm = 0\r\n  courseForm.endLocation = ''\r\n  courseForm.status = 1\r\n  \r\n  if (courseFormRef.value) {\r\n    courseFormRef.value.resetFields()\r\n  }\r\n}\r\n\r\n// 提交表单\r\nconst submitForm = () => {\r\n  courseFormRef.value.validate(async (valid) => {\r\n    if (!valid) return\r\n    \r\n    try {\r\n      const url = dialogType.value === 'add' \r\n        ? '/api/course' \r\n        : '/api/course'\r\n      \r\n      const method = dialogType.value === 'add' ? 'post' : 'put'\r\n      \r\n      const response = await axios[method](url, courseForm)\r\n      \r\n      if (response.data.code === 200) {\r\n        ElMessage.success(dialogType.value === 'add' ? '添加成功' : '修改成功')\r\n        dialogVisible.value = false\r\n        fetchCourses()\r\n      } else {\r\n        ElMessage.error(response.data.message || (dialogType.value === 'add' ? '添加失败' : '修改失败'))\r\n      }\r\n    } catch (error) {\r\n      console.error(dialogType.value === 'add' ? '添加失败:' : '修改失败:', error)\r\n      ElMessage.error(dialogType.value === 'add' ? '添加失败' : '修改失败')\r\n    }\r\n  })\r\n}\r\n\r\n// 格式化结课时间\r\nconst formatEndTime = (endTime) => {\r\n  if (!endTime) return '未设置'\r\n  return dayjs(endTime).format('YYYY-MM-DD HH:mm')\r\n}\r\n\r\n// 获取结课形式标签\r\nconst getEndFormLabel = (endForm) => {\r\n  switch (endForm) {\r\n    case 0: return '考试'\r\n    case 1: return '大作业'\r\n    default: return '未设置'\r\n  }\r\n}\r\n\r\n// 获取课程状态标签类型\r\nconst getStatusTag = (status) => {\r\n  switch (status) {\r\n    case 0: return 'danger'\r\n    case 1: return 'success'\r\n    case 2: return 'info'\r\n    default: return ''\r\n  }\r\n}\r\n\r\n// 获取课程状态标签文本\r\nconst getStatusLabel = (status) => {\r\n  switch (status) {\r\n    case 0: return '未开始'\r\n    case 1: return '进行中'\r\n    case 2: return '已结束'\r\n    default: return '未知'\r\n  }\r\n}\r\n\r\n// 页面加载时获取数据\r\nonMounted(() => {\r\n  fetchCourses()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.course-management {\r\n  padding: 20px;\r\n}\r\n\r\n.filter-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.course-list-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.dialog-footer {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}