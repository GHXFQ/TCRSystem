{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport axios from 'axios';\nimport { safeElementConfig } from '@/utils/resizeObserverFix';\nexport default {\n  __name: 'UserProfile',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const token = localStorage.getItem('token');\n    const userInfo = ref(JSON.parse(localStorage.getItem('userInfo') || '{}'));\n    const avatarUrl = ref('');\n    const loading = ref(false);\n    const passwordFormRef = ref(null);\n\n    // 返回对应用户角色的首页\n    const goToHome = () => {\n      const role = userInfo.value.role;\n      if (role === 0) {\n        router.push('/student/home');\n      } else if (role === 1) {\n        router.push('/teacher/home');\n      } else if (role === 2) {\n        router.push('/admin/home');\n      } else {\n        router.push('/login');\n      }\n    };\n\n    // 处理头像路径，确保使用正确的服务器地址\n    const getFullAvatarUrl = path => {\n      if (!path) return '';\n      // 如果已经是完整URL，则直接返回\n      if (path.startsWith('http')) {\n        return path;\n      }\n      // 否则拼接后端地址\n      // 假设后端服务运行在 http://localhost:8080\n      return `http://localhost:8080${path}`;\n    };\n\n    // 密码修改表单\n    const passwordForm = reactive({\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: ''\n    });\n\n    // 密码表单校验规则\n    const validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (passwordForm.confirmPassword !== '') {\n          passwordFormRef.value.validateField('confirmPassword');\n        }\n        callback();\n      }\n    };\n    const validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== passwordForm.newPassword) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    const passwordRules = {\n      oldPassword: [{\n        required: true,\n        message: '请输入当前密码',\n        trigger: 'blur'\n      }],\n      newPassword: [{\n        required: true,\n        message: '请输入新密码',\n        trigger: 'blur'\n      }, {\n        validator: validatePass,\n        trigger: 'blur'\n      }, {\n        min: 6,\n        message: '密码长度不能小于6个字符',\n        trigger: 'blur'\n      }],\n      confirmPassword: [{\n        required: true,\n        message: '请再次输入新密码',\n        trigger: 'blur'\n      }, {\n        validator: validatePass2,\n        trigger: 'blur'\n      }]\n    };\n\n    // 头像上传前的校验\n    const beforeAvatarUpload = file => {\n      const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n      const isLt2M = file.size / 1024 / 1024 < 2;\n      if (!isJpgOrPng) {\n        ElMessage.error('头像只能是JPG或PNG格式!');\n        return false;\n      }\n      if (!isLt2M) {\n        ElMessage.error('头像大小不能超过2MB!');\n        return false;\n      }\n      return true;\n    };\n\n    // 头像上传成功的回调\n    const handleAvatarSuccess = response => {\n      if (response.code === 200) {\n        const avatarPath = response.data;\n        avatarUrl.value = getFullAvatarUrl(avatarPath);\n        // 更新本地存储的用户信息\n        const updatedUserInfo = {\n          ...userInfo.value,\n          avatar: avatarPath\n        }; // 注意这里使用avatar而不是avatarUrl\n        localStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n        userInfo.value = updatedUserInfo;\n        ElMessage.success('头像上传成功');\n      } else {\n        ElMessage.error(response.message || '头像上传失败');\n      }\n    };\n\n    // 提交密码修改\n    const submitPasswordChange = async () => {\n      await passwordFormRef.value.validate(async valid => {\n        if (valid) {\n          loading.value = true;\n          try {\n            // 确保token正确发送\n            const response = await axios.post('/api/user/change-password', {\n              oldPassword: passwordForm.oldPassword,\n              newPassword: passwordForm.newPassword\n            }, {\n              headers: {\n                'Authorization': token\n              }\n            });\n            if (response.data.code === 200) {\n              ElMessage.success('密码修改成功，请重新登录');\n              // 清除登录信息，跳转到登录页\n              setTimeout(() => {\n                localStorage.removeItem('token');\n                localStorage.removeItem('userInfo');\n                router.push('/login');\n              }, 1500);\n            } else {\n              ElMessage.error(response.data.message || '密码修改失败');\n            }\n          } catch (error) {\n            console.error('密码修改出错:', error);\n            ElMessage.error('密码修改失败，请稍后重试');\n          } finally {\n            loading.value = false;\n          }\n        }\n      });\n    };\n\n    // 获取用户信息\n    const fetchUserProfile = async () => {\n      try {\n        const response = await axios.get('/api/user/profile', {\n          headers: {\n            'Authorization': token\n          }\n        });\n        if (response.data.code === 200) {\n          userInfo.value = response.data.data;\n          // 更新本地存储的用户信息\n          localStorage.setItem('userInfo', JSON.stringify(response.data.data));\n          // 如果有头像，设置头像URL\n          if (response.data.data.avatar) {\n            avatarUrl.value = getFullAvatarUrl(response.data.data.avatar);\n          }\n        }\n      } catch (error) {\n        console.error('获取用户信息出错:', error);\n      }\n    };\n    onMounted(() => {\n      fetchUserProfile();\n    });\n    const __returned__ = {\n      router,\n      token,\n      userInfo,\n      avatarUrl,\n      loading,\n      passwordFormRef,\n      goToHome,\n      getFullAvatarUrl,\n      passwordForm,\n      validatePass,\n      validatePass2,\n      passwordRules,\n      beforeAvatarUpload,\n      handleAvatarSuccess,\n      submitPasswordChange,\n      fetchUserProfile,\n      ref,\n      reactive,\n      onMounted,\n      get useRouter() {\n        return useRouter;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get axios() {\n        return axios;\n      },\n      get safeElementConfig() {\n        return safeElementConfig;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","useRouter","ElMessage","axios","safeElementConfig","router","token","localStorage","getItem","userInfo","JSON","parse","avatarUrl","loading","passwordFormRef","goToHome","role","value","push","getFullAvatarUrl","path","startsWith","passwordForm","oldPassword","newPassword","confirmPassword","validatePass","rule","callback","Error","validateField","validatePass2","passwordRules","required","message","trigger","validator","min","beforeAvatarUpload","file","isJpgOrPng","type","isLt2M","size","error","handleAvatarSuccess","response","code","avatarPath","data","updatedUserInfo","avatar","setItem","stringify","success","submitPasswordChange","validate","valid","post","headers","setTimeout","removeItem","console","fetchUserProfile","get"],"sources":["C:/Users/18083/Desktop/CCIT/TCRSystem/TCRSystem/frontend/src/views/UserProfile.vue"],"sourcesContent":["<template>\n  <div class=\"user-profile-container\">\n    <el-card class=\"profile-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <h2>个人信息</h2>\n          <el-button type=\"primary\" size=\"small\" @click=\"goToHome\">返回首页</el-button>\n        </div>\n      </template>\n      \n      <div class=\"profile-content\">\n        <div class=\"avatar-section\">\n          <div class=\"avatar-display\">\n            <img v-if=\"avatarUrl\" :src=\"avatarUrl\" class=\"avatar\" alt=\"用户头像\" />\n            <el-avatar v-else :size=\"100\" class=\"user-avatar\">{{ userInfo.realName?.substring(0, 1) || userInfo.username?.substring(0, 1) || 'U' }}</el-avatar>\n          </div>\n          \n          <el-upload\n            class=\"avatar-uploader\"\n            action=\"/api/user/upload-avatar\"\n            :headers=\"{ Authorization: token }\"\n            :show-file-list=\"false\"\n            :on-success=\"handleAvatarSuccess\"\n            :before-upload=\"beforeAvatarUpload\"\n            v-bind=\"safeElementConfig\"\n          >\n            <el-button size=\"small\" type=\"primary\" class=\"upload-button\">上传新头像</el-button>\n          </el-upload>\n          <div class=\"upload-hint\">支持JPG、PNG格式，大小不超过2MB</div>\n        </div>\n        \n        <div class=\"info-section\">\n          <el-descriptions :column=\"1\" border>\n            <el-descriptions-item v-if=\"userInfo.role === 0\" label=\"学号\">{{ userInfo.studentId || userInfo.username }}</el-descriptions-item>\n            <el-descriptions-item v-else-if=\"userInfo.role === 1\" label=\"工号\">{{ userInfo.teacherId || userInfo.username }}</el-descriptions-item>\n            <el-descriptions-item v-else label=\"用户名\">{{ userInfo.username }}</el-descriptions-item>\n            \n            <el-descriptions-item label=\"姓名\">{{ userInfo.realName || '未设置' }}</el-descriptions-item>\n            <el-descriptions-item label=\"角色\">\n              {{ userInfo.role === 0 ? '学生' : userInfo.role === 1 ? '教师' : '管理员' }}\n            </el-descriptions-item>\n            <el-descriptions-item v-if=\"userInfo.role === 0\" label=\"班级\">{{ userInfo.className || '未设置' }}</el-descriptions-item>\n            <el-descriptions-item v-if=\"userInfo.role === 0\" label=\"专业\">{{ userInfo.majorName || '未设置' }}</el-descriptions-item>\n            <el-descriptions-item v-if=\"userInfo.role === 0\" label=\"学院\">{{ userInfo.collegeName || '未设置' }}</el-descriptions-item>\n            <el-descriptions-item label=\"邮箱\">{{ userInfo.email || '未设置' }}</el-descriptions-item>\n          </el-descriptions>\n        </div>\n      </div>\n      \n      <div class=\"password-section\">\n        <h3>修改密码</h3>\n        <el-form \n          :model=\"passwordForm\" \n          :rules=\"passwordRules\" \n          ref=\"passwordFormRef\" \n          label-width=\"120px\"\n          status-icon\n        >\n          <el-form-item label=\"当前密码\" prop=\"oldPassword\">\n            <el-input \n              v-model=\"passwordForm.oldPassword\" \n              type=\"password\" \n              show-password\n              placeholder=\"请输入当前密码\"\n              v-bind=\"safeElementConfig\" \n            />\n          </el-form-item>\n          <el-form-item label=\"新密码\" prop=\"newPassword\">\n            <el-input \n              v-model=\"passwordForm.newPassword\" \n              type=\"password\" \n              show-password\n              placeholder=\"请输入新密码\" \n              v-bind=\"safeElementConfig\"\n            />\n          </el-form-item>\n          <el-form-item label=\"确认新密码\" prop=\"confirmPassword\">\n            <el-input \n              v-model=\"passwordForm.confirmPassword\" \n              type=\"password\" \n              show-password\n              placeholder=\"请再次输入新密码\" \n              v-bind=\"safeElementConfig\"\n            />\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" @click=\"submitPasswordChange\" :loading=\"loading\">修改密码</el-button>\n          </el-form-item>\n        </el-form>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport axios from 'axios';\nimport { safeElementConfig } from '@/utils/resizeObserverFix';\n\nconst router = useRouter();\nconst token = localStorage.getItem('token');\nconst userInfo = ref(JSON.parse(localStorage.getItem('userInfo') || '{}'));\nconst avatarUrl = ref('');\nconst loading = ref(false);\nconst passwordFormRef = ref(null);\n\n// 返回对应用户角色的首页\nconst goToHome = () => {\n  const role = userInfo.value.role;\n  if (role === 0) {\n    router.push('/student/home');\n  } else if (role === 1) {\n    router.push('/teacher/home');\n  } else if (role === 2) {\n    router.push('/admin/home');\n  } else {\n    router.push('/login');\n  }\n};\n\n// 处理头像路径，确保使用正确的服务器地址\nconst getFullAvatarUrl = (path) => {\n  if (!path) return '';\n  // 如果已经是完整URL，则直接返回\n  if (path.startsWith('http')) {\n    return path;\n  }\n  // 否则拼接后端地址\n  // 假设后端服务运行在 http://localhost:8080\n  return `http://localhost:8080${path}`;\n};\n\n// 密码修改表单\nconst passwordForm = reactive({\n  oldPassword: '',\n  newPassword: '',\n  confirmPassword: ''\n});\n\n// 密码表单校验规则\nconst validatePass = (rule, value, callback) => {\n  if (value === '') {\n    callback(new Error('请输入密码'));\n  } else {\n    if (passwordForm.confirmPassword !== '') {\n      passwordFormRef.value.validateField('confirmPassword');\n    }\n    callback();\n  }\n};\n\nconst validatePass2 = (rule, value, callback) => {\n  if (value === '') {\n    callback(new Error('请再次输入密码'));\n  } else if (value !== passwordForm.newPassword) {\n    callback(new Error('两次输入密码不一致!'));\n  } else {\n    callback();\n  }\n};\n\nconst passwordRules = {\n  oldPassword: [\n    { required: true, message: '请输入当前密码', trigger: 'blur' }\n  ],\n  newPassword: [\n    { required: true, message: '请输入新密码', trigger: 'blur' },\n    { validator: validatePass, trigger: 'blur' },\n    { min: 6, message: '密码长度不能小于6个字符', trigger: 'blur' }\n  ],\n  confirmPassword: [\n    { required: true, message: '请再次输入新密码', trigger: 'blur' },\n    { validator: validatePass2, trigger: 'blur' }\n  ]\n};\n\n// 头像上传前的校验\nconst beforeAvatarUpload = (file) => {\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n  const isLt2M = file.size / 1024 / 1024 < 2;\n\n  if (!isJpgOrPng) {\n    ElMessage.error('头像只能是JPG或PNG格式!');\n    return false;\n  }\n  if (!isLt2M) {\n    ElMessage.error('头像大小不能超过2MB!');\n    return false;\n  }\n  return true;\n};\n\n// 头像上传成功的回调\nconst handleAvatarSuccess = (response) => {\n  if (response.code === 200) {\n    const avatarPath = response.data;\n    avatarUrl.value = getFullAvatarUrl(avatarPath);\n    // 更新本地存储的用户信息\n    const updatedUserInfo = { ...userInfo.value, avatar: avatarPath };  // 注意这里使用avatar而不是avatarUrl\n    localStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n    userInfo.value = updatedUserInfo;\n    ElMessage.success('头像上传成功');\n  } else {\n    ElMessage.error(response.message || '头像上传失败');\n  }\n};\n\n// 提交密码修改\nconst submitPasswordChange = async () => {\n  await passwordFormRef.value.validate(async (valid) => {\n    if (valid) {\n      loading.value = true;\n      try {\n        // 确保token正确发送\n        const response = await axios.post('/api/user/change-password', {\n          oldPassword: passwordForm.oldPassword,\n          newPassword: passwordForm.newPassword\n        }, {\n          headers: { 'Authorization': token }\n        });\n        \n        if (response.data.code === 200) {\n          ElMessage.success('密码修改成功，请重新登录');\n          // 清除登录信息，跳转到登录页\n          setTimeout(() => {\n            localStorage.removeItem('token');\n            localStorage.removeItem('userInfo');\n            router.push('/login');\n          }, 1500);\n        } else {\n          ElMessage.error(response.data.message || '密码修改失败');\n        }\n      } catch (error) {\n        console.error('密码修改出错:', error);\n        ElMessage.error('密码修改失败，请稍后重试');\n      } finally {\n        loading.value = false;\n      }\n    }\n  });\n};\n\n// 获取用户信息\nconst fetchUserProfile = async () => {\n  try {\n    const response = await axios.get('/api/user/profile', {\n      headers: { 'Authorization': token }\n    });\n    \n    if (response.data.code === 200) {\n      userInfo.value = response.data.data;\n      // 更新本地存储的用户信息\n      localStorage.setItem('userInfo', JSON.stringify(response.data.data));\n      // 如果有头像，设置头像URL\n      if (response.data.data.avatar) {\n        avatarUrl.value = getFullAvatarUrl(response.data.data.avatar);\n      }\n    }\n  } catch (error) {\n    console.error('获取用户信息出错:', error);\n  }\n};\n\nonMounted(() => {\n  fetchUserProfile();\n});\n</script>\n\n<style scoped>\n.user-profile-container {\n  padding: 20px;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.profile-card {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.profile-content {\n  display: flex;\n  margin-bottom: 30px;\n}\n\n.avatar-section {\n  margin-right: 30px;\n  text-align: center;\n  flex-shrink: 0;\n}\n\n.info-section {\n  flex-grow: 1;\n}\n\n.avatar-uploader {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.avatar {\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.user-avatar {\n  background-color: #409EFF;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n}\n\n.upload-hint {\n  margin-top: 8px;\n  color: #909399;\n  font-size: 14px;\n}\n\n.password-section {\n  margin-top: 20px;\n  padding-top: 20px;\n  border-top: 1px solid #ebeef5;\n}\n\n.password-section h3 {\n  margin-bottom: 20px;\n  color: #303133;\n}\n\n@media (max-width: 768px) {\n  .profile-content {\n    flex-direction: column;\n  }\n  \n  .avatar-section {\n    margin-right: 0;\n    margin-bottom: 20px;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}