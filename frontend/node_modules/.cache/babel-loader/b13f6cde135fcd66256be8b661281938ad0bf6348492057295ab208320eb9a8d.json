{"ast":null,"code":"/**\r\n * ResizeObserver问题修复工具\r\n * 用于解决Element Plus组件在调整大小时出现的ResizeObserver错误\r\n */\n\n/**\r\n * 应用全局ResizeObserver错误处理器\r\n * 这会忽略\"ResizeObserver loop completed with undelivered notifications\"错误\r\n */\nexport const applyResizeObserverErrorFix = () => {\n  // 全局标志，用于判断是否已经应用了修复\n  if (window.__resizeObserverFixed) {\n    return;\n  }\n\n  // 标记为已修复\n  window.__resizeObserverFixed = true;\n\n  // 保存原始console.error方法\n  const originalConsoleError = window.console.error;\n\n  // 重写console.error，过滤掉ResizeObserver错误\n  window.console.error = (...args) => {\n    // 忽略ResizeObserver相关错误\n    if (args[0] && typeof args[0] === 'string' && (args[0].includes('ResizeObserver loop') || args[0].includes('ResizeObserver') || args[0].includes('Resize') || args[0].includes('Maximum update depth exceeded'))) {\n      return;\n    }\n    // 其他错误正常输出\n    originalConsoleError.apply(window.console, args);\n  };\n\n  // 完全禁用原生ResizeObserver，替换为无操作版本\n  // 注意：这是一种强力方法，会阻止所有ResizeObserver功能，但也会彻底消除错误\n  const disableResizeObserver = () => {\n    try {\n      // 原始的ResizeObserver\n      const originalResizeObserver = window.ResizeObserver;\n\n      // 替换为无操作版本\n      window.ResizeObserver = class NoopResizeObserver {\n        constructor(callback) {\n          this.callback = callback;\n        }\n        observe() {/* 无操作 */}\n        unobserve() {/* 无操作 */}\n        disconnect() {/* 无操作 */}\n      };\n\n      // 保存引用，以便在需要时恢复\n      window.__originalResizeObserver = originalResizeObserver;\n\n      // 在5秒后恢复，以便让应用有时间完成初始化而不受ResizeObserver干扰\n      setTimeout(() => {\n        // 使用修补版本替代完全禁用\n        applyPatchedResizeObserver();\n      }, 5000);\n    } catch (e) {\n      console.log('禁用ResizeObserver失败:', e);\n    }\n  };\n\n  // 应用修补版本的ResizeObserver，仅捕获错误但保留功能\n  const applyPatchedResizeObserver = () => {\n    try {\n      // 如果已经保存了原始版本，则使用它，否则使用当前版本\n      const originalResizeObserver = window.__originalResizeObserver || window.ResizeObserver;\n\n      // 替换为修补版本\n      window.ResizeObserver = class PatchedResizeObserver {\n        constructor(callback) {\n          // 包装回调函数，捕获并忽略错误\n          const safeCallback = (entries, observer) => {\n            try {\n              // 使用requestAnimationFrame来减少同步的布局更新\n              requestAnimationFrame(() => {\n                try {\n                  callback(entries, observer);\n                } catch (innerErr) {\n                  // 忽略特定的ResizeObserver错误\n                  if (innerErr.message && (innerErr.message.includes('ResizeObserver') || innerErr.message.includes('Maximum update depth'))) {\n                    return;\n                  }\n                  throw innerErr;\n                }\n              });\n            } catch (err) {\n              // 忽略特定的ResizeObserver错误\n              if (err.message && (err.message.includes('ResizeObserver') || err.message.includes('Maximum update depth'))) {\n                return;\n              }\n              throw err;\n            }\n          };\n\n          // 创建原始的ResizeObserver，但使用安全的回调\n          this._observer = new originalResizeObserver(safeCallback);\n        }\n\n        // 代理方法到原始观察者\n        observe(target, options) {\n          try {\n            this._observer.observe(target, options);\n          } catch (e) {\n            console.log('ResizeObserver.observe error:', e);\n          }\n        }\n        unobserve(target) {\n          try {\n            this._observer.unobserve(target);\n          } catch (e) {\n            console.log('ResizeObserver.unobserve error:', e);\n          }\n        }\n        disconnect() {\n          try {\n            this._observer.disconnect();\n          } catch (e) {\n            console.log('ResizeObserver.disconnect error:', e);\n          }\n        }\n      };\n    } catch (e) {\n      console.log('应用ResizeObserver补丁失败:', e);\n    }\n  };\n\n  // 根据错误频率选择修复策略\n  let errorCount = 0;\n  const originalError = window.Error;\n  window.Error = function (...args) {\n    const error = new originalError(...args);\n    if (error.message && error.message.includes('ResizeObserver')) {\n      errorCount++;\n\n      // 如果短时间内错误过多，应用强力修复\n      if (errorCount > 3) {\n        // 重置计数\n        errorCount = 0;\n        // 应用强力修复\n        disableResizeObserver();\n      }\n    }\n    return error;\n  };\n\n  // 初始应用修补版本\n  applyPatchedResizeObserver();\n\n  // 监听全局未捕获错误\n  window.addEventListener('error', event => {\n    if (event && event.message && (event.message.includes('ResizeObserver') || event.message.includes('Resize') || event.message.includes('Maximum update depth exceeded'))) {\n      event.preventDefault();\n      event.stopPropagation();\n      return false;\n    }\n  }, true);\n\n  // 监听Promise未捕获错误\n  window.addEventListener('unhandledrejection', event => {\n    if (event && event.reason && (String(event.reason).includes('ResizeObserver') || String(event.reason).includes('Resize') || String(event.reason).includes('Maximum update depth exceeded'))) {\n      event.preventDefault();\n      event.stopPropagation();\n      return false;\n    }\n  });\n\n  // 修复Element Plus标签页切换问题\n  const fixTabsResize = () => {\n    const tabNavs = document.querySelectorAll('.el-tabs__nav');\n    if (tabNavs.length > 0) {\n      // 使用requestAnimationFrame确保在下一帧渲染时处理\n      window.requestAnimationFrame(() => {\n        tabNavs.forEach(nav => {\n          if (nav.parentElement) {\n            const tabHeader = nav.parentElement;\n            // 触发一次重新计算布局\n            tabHeader.style.display = 'none';\n            setTimeout(() => {\n              tabHeader.style.display = '';\n            }, 0);\n          }\n        });\n      });\n    }\n  };\n\n  // 监听标签页切换事件\n  document.addEventListener('click', e => {\n    const target = e.target;\n    if (target && target.classList && (target.classList.contains('el-tabs__item') || target.closest('.el-tabs__item'))) {\n      setTimeout(fixTabsResize, 10);\n    }\n  });\n\n  // 全局MutationObserver监听DOM变化，修复标签页\n  const setupTabsMutationObserver = () => {\n    const observer = new MutationObserver(mutations => {\n      let hasTabs = false;\n      for (const mutation of mutations) {\n        if (mutation.addedNodes.length) {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === 1 && (node.classList?.contains('el-tabs__content') || node.querySelector?.('.el-tabs__content'))) {\n              hasTabs = true;\n              break;\n            }\n          }\n        }\n      }\n      if (hasTabs) {\n        setTimeout(fixTabsResize, 50);\n      }\n    });\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['class', 'style']\n    });\n  };\n\n  // 注入CSS样式\n  const injectCSS = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      /* 防止标签页内容区域触发不必要的调整大小事件 */\n      .el-tabs__content {\n        overflow: hidden !important;\n        min-height: 200px;\n        transform: translateZ(0);\n        will-change: transform;\n        contain: layout style;\n      }\n      \n      /* 为表格设置溢出处理，防止尺寸计算问题 */\n      .el-table {\n        overflow: hidden !important;\n        transform: translateZ(0);\n        will-change: transform;\n        contain: layout style;\n      }\n      \n      /* 修复弹窗中的ResizeObserver问题 */\n      .el-dialog__body {\n        min-height: 50px;\n        overflow: auto !important;\n        contain: layout style;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 初始化DOM后设置监听\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      setupTabsMutationObserver();\n      injectCSS();\n    });\n  } else {\n    setupTabsMutationObserver();\n    injectCSS();\n  }\n};\n\n/**\r\n * 为Element Plus组件提供安全的配置\r\n * 用于避免ResizeObserver相关问题\r\n */\nexport const safeElementConfig = {\n  // 禁止传送到body，减少ResizeObserver事件\n  teleported: false,\n  // 关闭时销毁内容，避免累积过多监听器\n  destroyOnClose: true,\n  // 避免自动聚焦，减少不必要的重排\n  autofocus: false,\n  // 在页面调整大小时减少不必要的重排\n  popperOptions: {\n    strategy: 'fixed',\n    modifiers: [{\n      name: 'computeStyles',\n      options: {\n        adaptive: false,\n        gpuAcceleration: false\n      }\n    }, {\n      name: 'preventOverflow',\n      options: {\n        padding: 10\n      }\n    }]\n  }\n};\n\n/**\r\n * 为Element Plus标签页提供安全的配置\r\n * 特别处理标签页切换问题\r\n */\nexport const safeTabsConfig = {\n  // 避免自动触发ResizeObserver事件\n  lazy: true,\n  // 在标签页切换后重新计算布局\n  onTabClick: () => {\n    try {\n      // 延迟后触发窗口大小调整事件\n      setTimeout(() => {\n        window.dispatchEvent(new Event('resize'));\n      }, 50);\n\n      // 延迟后尝试修复标签页布局\n      setTimeout(() => {\n        const tabContents = document.querySelectorAll('.el-tabs__content');\n        for (const content of tabContents) {\n          // 强制重排\n          content.style.display = 'none';\n          content.offsetHeight; // 触发重排\n          content.style.display = '';\n        }\n      }, 100);\n    } catch (e) {\n      // 忽略错误\n    }\n  }\n};","map":{"version":3,"names":["applyResizeObserverErrorFix","window","__resizeObserverFixed","originalConsoleError","console","error","args","includes","apply","disableResizeObserver","originalResizeObserver","ResizeObserver","NoopResizeObserver","constructor","callback","observe","unobserve","disconnect","__originalResizeObserver","setTimeout","applyPatchedResizeObserver","e","log","PatchedResizeObserver","safeCallback","entries","observer","requestAnimationFrame","innerErr","message","err","_observer","target","options","errorCount","originalError","Error","addEventListener","event","preventDefault","stopPropagation","reason","String","fixTabsResize","tabNavs","document","querySelectorAll","length","forEach","nav","parentElement","tabHeader","style","display","classList","contains","closest","setupTabsMutationObserver","MutationObserver","mutations","hasTabs","mutation","addedNodes","node","nodeType","querySelector","body","childList","subtree","attributes","attributeFilter","injectCSS","createElement","textContent","head","appendChild","readyState","safeElementConfig","teleported","destroyOnClose","autofocus","popperOptions","strategy","modifiers","name","adaptive","gpuAcceleration","padding","safeTabsConfig","lazy","onTabClick","dispatchEvent","Event","tabContents","content","offsetHeight"],"sources":["C:/Users/18083/Desktop/CCIT/TCRSystem/TCRSystem/frontend/src/utils/resizeObserverFix.js"],"sourcesContent":["/**\r\n * ResizeObserver问题修复工具\r\n * 用于解决Element Plus组件在调整大小时出现的ResizeObserver错误\r\n */\r\n\r\n/**\r\n * 应用全局ResizeObserver错误处理器\r\n * 这会忽略\"ResizeObserver loop completed with undelivered notifications\"错误\r\n */\r\nexport const applyResizeObserverErrorFix = () => {\r\n  // 全局标志，用于判断是否已经应用了修复\r\n  if (window.__resizeObserverFixed) {\r\n    return;\r\n  }\r\n  \r\n  // 标记为已修复\r\n  window.__resizeObserverFixed = true;\r\n  \r\n  // 保存原始console.error方法\r\n  const originalConsoleError = window.console.error;\r\n  \r\n  // 重写console.error，过滤掉ResizeObserver错误\r\n  window.console.error = (...args) => {\r\n    // 忽略ResizeObserver相关错误\r\n    if (args[0] && \r\n        typeof args[0] === 'string' && \r\n        (args[0].includes('ResizeObserver loop') || \r\n         args[0].includes('ResizeObserver') ||\r\n         args[0].includes('Resize') ||\r\n         args[0].includes('Maximum update depth exceeded'))) {\r\n      return;\r\n    }\r\n    // 其他错误正常输出\r\n    originalConsoleError.apply(window.console, args);\r\n  };\r\n  \r\n  // 完全禁用原生ResizeObserver，替换为无操作版本\r\n  // 注意：这是一种强力方法，会阻止所有ResizeObserver功能，但也会彻底消除错误\r\n  const disableResizeObserver = () => {\r\n    try {\r\n      // 原始的ResizeObserver\r\n      const originalResizeObserver = window.ResizeObserver;\r\n      \r\n      // 替换为无操作版本\r\n      window.ResizeObserver = class NoopResizeObserver {\r\n        constructor(callback) {\r\n          this.callback = callback;\r\n        }\r\n        \r\n        observe() { /* 无操作 */ }\r\n        unobserve() { /* 无操作 */ }\r\n        disconnect() { /* 无操作 */ }\r\n      };\r\n      \r\n      // 保存引用，以便在需要时恢复\r\n      window.__originalResizeObserver = originalResizeObserver;\r\n      \r\n      // 在5秒后恢复，以便让应用有时间完成初始化而不受ResizeObserver干扰\r\n      setTimeout(() => {\r\n        // 使用修补版本替代完全禁用\r\n        applyPatchedResizeObserver();\r\n      }, 5000);\r\n    } catch (e) {\r\n      console.log('禁用ResizeObserver失败:', e);\r\n    }\r\n  };\r\n  \r\n  // 应用修补版本的ResizeObserver，仅捕获错误但保留功能\r\n  const applyPatchedResizeObserver = () => {\r\n    try {\r\n      // 如果已经保存了原始版本，则使用它，否则使用当前版本\r\n      const originalResizeObserver = window.__originalResizeObserver || window.ResizeObserver;\r\n      \r\n      // 替换为修补版本\r\n      window.ResizeObserver = class PatchedResizeObserver {\r\n        constructor(callback) {\r\n          // 包装回调函数，捕获并忽略错误\r\n          const safeCallback = (entries, observer) => {\r\n            try {\r\n              // 使用requestAnimationFrame来减少同步的布局更新\r\n              requestAnimationFrame(() => {\r\n                try {\r\n                  callback(entries, observer);\r\n                } catch (innerErr) {\r\n                  // 忽略特定的ResizeObserver错误\r\n                  if (innerErr.message && \r\n                      (innerErr.message.includes('ResizeObserver') || \r\n                       innerErr.message.includes('Maximum update depth'))) {\r\n                    return;\r\n                  }\r\n                  throw innerErr;\r\n                }\r\n              });\r\n            } catch (err) {\r\n              // 忽略特定的ResizeObserver错误\r\n              if (err.message && \r\n                  (err.message.includes('ResizeObserver') || \r\n                   err.message.includes('Maximum update depth'))) {\r\n                return;\r\n              }\r\n              throw err;\r\n            }\r\n          };\r\n          \r\n          // 创建原始的ResizeObserver，但使用安全的回调\r\n          this._observer = new originalResizeObserver(safeCallback);\r\n        }\r\n        \r\n        // 代理方法到原始观察者\r\n        observe(target, options) {\r\n          try {\r\n            this._observer.observe(target, options);\r\n          } catch (e) {\r\n            console.log('ResizeObserver.observe error:', e);\r\n          }\r\n        }\r\n        \r\n        unobserve(target) {\r\n          try {\r\n            this._observer.unobserve(target);\r\n          } catch (e) {\r\n            console.log('ResizeObserver.unobserve error:', e);\r\n          }\r\n        }\r\n        \r\n        disconnect() {\r\n          try {\r\n            this._observer.disconnect();\r\n          } catch (e) {\r\n            console.log('ResizeObserver.disconnect error:', e);\r\n          }\r\n        }\r\n      };\r\n    } catch (e) {\r\n      console.log('应用ResizeObserver补丁失败:', e);\r\n    }\r\n  };\r\n  \r\n  // 根据错误频率选择修复策略\r\n  let errorCount = 0;\r\n  const originalError = window.Error;\r\n  \r\n  window.Error = function(...args) {\r\n    const error = new originalError(...args);\r\n    if (error.message && error.message.includes('ResizeObserver')) {\r\n      errorCount++;\r\n      \r\n      // 如果短时间内错误过多，应用强力修复\r\n      if (errorCount > 3) {\r\n        // 重置计数\r\n        errorCount = 0;\r\n        // 应用强力修复\r\n        disableResizeObserver();\r\n      }\r\n    }\r\n    return error;\r\n  };\r\n  \r\n  // 初始应用修补版本\r\n  applyPatchedResizeObserver();\r\n  \r\n  // 监听全局未捕获错误\r\n  window.addEventListener('error', (event) => {\r\n    if (event && event.message && \r\n        (event.message.includes('ResizeObserver') || \r\n         event.message.includes('Resize') ||\r\n         event.message.includes('Maximum update depth exceeded'))) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  // 监听Promise未捕获错误\r\n  window.addEventListener('unhandledrejection', (event) => {\r\n    if (event && event.reason && \r\n        (String(event.reason).includes('ResizeObserver') || \r\n         String(event.reason).includes('Resize') ||\r\n         String(event.reason).includes('Maximum update depth exceeded'))) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      return false;\r\n    }\r\n  });\r\n  \r\n  // 修复Element Plus标签页切换问题\r\n  const fixTabsResize = () => {\r\n    const tabNavs = document.querySelectorAll('.el-tabs__nav');\r\n    if (tabNavs.length > 0) {\r\n      // 使用requestAnimationFrame确保在下一帧渲染时处理\r\n      window.requestAnimationFrame(() => {\r\n        tabNavs.forEach(nav => {\r\n          if (nav.parentElement) {\r\n            const tabHeader = nav.parentElement;\r\n            // 触发一次重新计算布局\r\n            tabHeader.style.display = 'none';\r\n            setTimeout(() => {\r\n              tabHeader.style.display = '';\r\n            }, 0);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  };\r\n  \r\n  // 监听标签页切换事件\r\n  document.addEventListener('click', (e) => {\r\n    const target = e.target;\r\n    if (target && target.classList && \r\n        (target.classList.contains('el-tabs__item') || \r\n         target.closest('.el-tabs__item'))) {\r\n      setTimeout(fixTabsResize, 10);\r\n    }\r\n  });\r\n  \r\n  // 全局MutationObserver监听DOM变化，修复标签页\r\n  const setupTabsMutationObserver = () => {\r\n    const observer = new MutationObserver((mutations) => {\r\n      let hasTabs = false;\r\n      for (const mutation of mutations) {\r\n        if (mutation.addedNodes.length) {\r\n          for (const node of mutation.addedNodes) {\r\n            if (node.nodeType === 1 && \r\n                (node.classList?.contains('el-tabs__content') || \r\n                 node.querySelector?.('.el-tabs__content'))) {\r\n              hasTabs = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (hasTabs) {\r\n        setTimeout(fixTabsResize, 50);\r\n      }\r\n    });\r\n    \r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true,\r\n      attributes: true,\r\n      attributeFilter: ['class', 'style']\r\n    });\r\n  };\r\n  \r\n  // 注入CSS样式\r\n  const injectCSS = () => {\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      /* 防止标签页内容区域触发不必要的调整大小事件 */\r\n      .el-tabs__content {\r\n        overflow: hidden !important;\r\n        min-height: 200px;\r\n        transform: translateZ(0);\r\n        will-change: transform;\r\n        contain: layout style;\r\n      }\r\n      \r\n      /* 为表格设置溢出处理，防止尺寸计算问题 */\r\n      .el-table {\r\n        overflow: hidden !important;\r\n        transform: translateZ(0);\r\n        will-change: transform;\r\n        contain: layout style;\r\n      }\r\n      \r\n      /* 修复弹窗中的ResizeObserver问题 */\r\n      .el-dialog__body {\r\n        min-height: 50px;\r\n        overflow: auto !important;\r\n        contain: layout style;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  };\r\n  \r\n  // 初始化DOM后设置监听\r\n  if (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n      setupTabsMutationObserver();\r\n      injectCSS();\r\n    });\r\n  } else {\r\n    setupTabsMutationObserver();\r\n    injectCSS();\r\n  }\r\n};\r\n\r\n/**\r\n * 为Element Plus组件提供安全的配置\r\n * 用于避免ResizeObserver相关问题\r\n */\r\nexport const safeElementConfig = {\r\n  // 禁止传送到body，减少ResizeObserver事件\r\n  teleported: false,\r\n  // 关闭时销毁内容，避免累积过多监听器\r\n  destroyOnClose: true,\r\n  // 避免自动聚焦，减少不必要的重排\r\n  autofocus: false,\r\n  // 在页面调整大小时减少不必要的重排\r\n  popperOptions: {\r\n    strategy: 'fixed',\r\n    modifiers: [\r\n      {\r\n        name: 'computeStyles',\r\n        options: {\r\n          adaptive: false,\r\n          gpuAcceleration: false\r\n        }\r\n      },\r\n      {\r\n        name: 'preventOverflow',\r\n        options: {\r\n          padding: 10\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\n/**\r\n * 为Element Plus标签页提供安全的配置\r\n * 特别处理标签页切换问题\r\n */\r\nexport const safeTabsConfig = {\r\n  // 避免自动触发ResizeObserver事件\r\n  lazy: true,\r\n  // 在标签页切换后重新计算布局\r\n  onTabClick: () => {\r\n    try {\r\n      // 延迟后触发窗口大小调整事件\r\n      setTimeout(() => {\r\n        window.dispatchEvent(new Event('resize'));\r\n      }, 50);\r\n      \r\n      // 延迟后尝试修复标签页布局\r\n      setTimeout(() => {\r\n        const tabContents = document.querySelectorAll('.el-tabs__content');\r\n        for (const content of tabContents) {\r\n          // 强制重排\r\n          content.style.display = 'none';\r\n          content.offsetHeight; // 触发重排\r\n          content.style.display = '';\r\n        }\r\n      }, 100);\r\n    } catch (e) {\r\n      // 忽略错误\r\n    }\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}